{"ast":null,"code":"var _jsxFileName = \"/Volumes/data/SNU-UI-component/src/components/tooltip/index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Element4Medium } from './../../global-style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TooltipComponent = ({\n  label,\n  arrowX,\n  arrowY\n}) => {\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    arrowX: arrowX,\n    arrowY: arrowY,\n    children: /*#__PURE__*/_jsxDEV(Element4Medium, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = TooltipComponent;\nconst Tooltip = styled.div`\n  height: 2.5rem;\n  background-color: #000;\n  display: inline-flex;\n  align-items: center;\n  margin: 0.5rem 0 0 -1.4rem;\n  padding: 0 1rem;\n  opacity: 0.8;\n  text-align: ${props => props.arrowX};\n  color: white;\n  border-radius: 0.5rem;\n  position: relative;\n  &::after {\n    content: '';\n    position: absolute;\n    ${props => getArrow(props.arrowX, props.arrowY)}\n  }\n`;\n_c2 = Tooltip;\n\nconst getArrow = (arrowX, arrowY) => {\n  let css = ``;\n\n  switch (arrowY) {\n    case 'top':\n      css += `\n      bottom: -10px;\n      border-top: 10px solid #000;\n      border-left: 10px solid transparent;\n      border-right: 10px solid transparent;\n      border-bottom: 0px solid transparent;\n      `;\n      break;\n\n    case 'bottom':\n      css += `\n      top: -10px;\n      border-top: 0px solid transparent;\n      border-left: 10px solid transparent;\n      border-right: 10px solid transparent;\n      border-bottom: 10px solid #000;\n      `;\n      break;\n  }\n\n  switch (arrowX) {\n    case 'left':\n      css += `\n        left: 0.75rem;\n      `;\n      break;\n\n    case 'right':\n      css += `\n        right: 0.75rem;\n      `;\n      break;\n\n    case 'center':\n      css += `\n        left: calc(50% - 10px);\n      `;\n      break;\n  }\n\n  return css;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TooltipComponent\");\n$RefreshReg$(_c2, \"Tooltip\");","map":{"version":3,"sources":["/Volumes/data/SNU-UI-component/src/components/tooltip/index.tsx"],"names":["React","styled","Element4Medium","TooltipComponent","label","arrowX","arrowY","Tooltip","div","props","getArrow","css"],"mappings":";AAAA,OAAOA,KAAP,MAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,sBAA/B;;AASA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA;AAAjB,CAAD,KAA6C;AAC3E,sBACE,QAAC,OAAD;AAAS,IAAA,MAAM,EAAED,MAAjB;AAAyB,IAAA,MAAM,EAAEC,MAAjC;AAAA,2BACE,QAAC,cAAD;AAAA,gBAAiBF;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CANM;KAAMD,gB;AAQb,MAAMI,OAAO,GAAGN,MAAM,CAACO,GAAwC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAiBC,KAAD,IAAWA,KAAK,CAACJ,MAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,MAAOI,KAAD,IAAWC,QAAQ,CAACD,KAAK,CAACJ,MAAP,EAAeI,KAAK,CAACH,MAArB,CAA6B;AACtD;AACA,CAjBA;MAAMC,O;;AAmBN,MAAMG,QAAQ,GAAG,CAACL,MAAD,EAAiBC,MAAjB,KAAoC;AACnD,MAAIK,GAAG,GAAI,EAAX;;AACA,UAAQL,MAAR;AACE,SAAK,KAAL;AACEK,MAAAA,GAAG,IAAK;AACd;AACA;AACA;AACA;AACA;AACA,OANM;AAOA;;AACF,SAAK,QAAL;AACEA,MAAAA,GAAG,IAAK;AACd;AACA;AACA;AACA;AACA;AACA,OANM;AAOA;AAlBJ;;AAqBA,UAAQN,MAAR;AACE,SAAK,MAAL;AACEM,MAAAA,GAAG,IAAK;AACd;AACA,OAFM;AAGA;;AACF,SAAK,OAAL;AACEA,MAAAA,GAAG,IAAK;AACd;AACA,OAFM;AAGA;;AACF,SAAK,QAAL;AACEA,MAAAA,GAAG,IAAK;AACd;AACA,OAFM;AAGA;AAfJ;;AAkBA,SAAOA,GAAP;AACD,CA1CD","sourcesContent":["import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { Element4Medium } from './../../global-style';\n\nexport interface TooltipProps {\n  children: any;\n  label: string;\n  arrowX: 'left' | 'center' | 'right';\n  arrowY: 'top' | 'bottom';\n}\n\nexport const TooltipComponent = ({ label, arrowX, arrowY }: TooltipProps) => {\n  return (\n    <Tooltip arrowX={arrowX} arrowY={arrowY}>\n      <Element4Medium>{label}</Element4Medium>\n    </Tooltip>\n  );\n};\n\nconst Tooltip = styled.div<{ arrowX: string; arrowY: string }>`\n  height: 2.5rem;\n  background-color: #000;\n  display: inline-flex;\n  align-items: center;\n  margin: 0.5rem 0 0 -1.4rem;\n  padding: 0 1rem;\n  opacity: 0.8;\n  text-align: ${(props) => props.arrowX};\n  color: white;\n  border-radius: 0.5rem;\n  position: relative;\n  &::after {\n    content: '';\n    position: absolute;\n    ${(props) => getArrow(props.arrowX, props.arrowY)}\n  }\n`;\n\nconst getArrow = (arrowX: string, arrowY: string) => {\n  let css = ``;\n  switch (arrowY) {\n    case 'top':\n      css += `\n      bottom: -10px;\n      border-top: 10px solid #000;\n      border-left: 10px solid transparent;\n      border-right: 10px solid transparent;\n      border-bottom: 0px solid transparent;\n      `;\n      break;\n    case 'bottom':\n      css += `\n      top: -10px;\n      border-top: 0px solid transparent;\n      border-left: 10px solid transparent;\n      border-right: 10px solid transparent;\n      border-bottom: 10px solid #000;\n      `;\n      break;\n  }\n\n  switch (arrowX) {\n    case 'left':\n      css += `\n        left: 0.75rem;\n      `;\n      break;\n    case 'right':\n      css += `\n        right: 0.75rem;\n      `;\n      break;\n    case 'center':\n      css += `\n        left: calc(50% - 10px);\n      `;\n      break;\n  }\n\n  return css;\n};\n"]},"metadata":{},"sourceType":"module"}