"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const pug_1 = __importDefault(require("pug"));
const fs_extra_1 = require("fs-extra");
const react_docgen_1 = require("react-docgen");
const update_notifier_1 = __importDefault(require("update-notifier"));
const package_json_1 = require("../package.json");
const defaultReactDocgenResolver = "findAllExportedComponentDefinitions";
const availableReactDocgenResolvers = [
    "findAllExportedComponentDefinitions",
    "findExportedComponentDefinition",
    "findAllComponentDefinitions"
];
update_notifier_1.default({
    pkg: {
        name: package_json_1.name,
        version: package_json_1.version
    },
    updateCheckInterval: 0,
    shouldNotifyInNpmScript: true
}).notify();
class default_1 {
    constructor() {
        this.supportedFileExtensions = [".js", ".jsx", ".ts", ".tsx"];
        this.tsExtensions = [".ts", ".tsx"];
        this.config = {
            tsDocgen: "react-docgen",
            tsConfigPath: "./tsconfig.json"
        };
        this.reactTsDocgen = null;
        this.resolver = require(`react-docgen/dist/resolver/${defaultReactDocgenResolver}`).default;
        this.template = pug_1.default.compileFile(path_1.default.join(__dirname, "template/snippet.pug"));
    }
    // eslint-disable-next-line require-await
    init(pluginContext) {
        return __awaiter(this, void 0, void 0, function* () {
            Object.assign(this.config, pluginContext.config);
            this.logger = pluginContext.logger;
            if (this.config.reactDocgenResolver) {
                const { reactDocgenResolver } = this.config;
                if (availableReactDocgenResolvers.includes(reactDocgenResolver) &&
                    reactDocgenResolver !== "findAllExportedComponentDefinitions") {
                    this.logger.debug(`Setting react-docgen resolver to ${reactDocgenResolver}`);
                    this.resolver = require(`react-docgen/dist/resolver/${reactDocgenResolver}`).default;
                }
            }
        });
    }
    process(context) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = path_1.default.resolve(context.path);
            const file = yield fs_extra_1.readFile(filePath);
            let rawReactDocs;
            let propsFilter;
            if (this.config.tsDocgen === "react-docgen-typescript" && this.tsExtensions.includes(path_1.default.extname(filePath))) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`Using react-docgen-typescript for ${filePath}`);
                ({ rawReactDocs, propsFilter } = yield this.parseUsingReactDocgenTypescript(filePath));
            }
            else {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`Using react-docgen for ${filePath}`);
                ({ rawReactDocs, propsFilter } = this.parseUsingReactDocgen(file, filePath));
            }
            const snippets = rawReactDocs
                .map(rrd => {
                const rawProps = rrd.props || {};
                const props = Object.keys(rawProps)
                    .filter(name => name !== "children")
                    .filter(name => propsFilter(rawProps, name))
                    .map(name => {
                    const prop = rawProps[name];
                    if (prop.type) {
                        // Required to remove \" from typescript literal types
                        prop.type.name = prop.type.name.replace(/"/g, "'");
                        if ("raw" in prop.type && prop.type.raw) {
                            prop.type.raw = prop.type.raw.replace(/"/g, "'");
                        }
                    }
                    return { name, value: prop };
                });
                const hasChildren = !!rawProps.children;
                const snippet = this.generateSnippet({
                    description: rrd.description,
                    componentName: rrd.displayName,
                    props,
                    hasChildren
                });
                return snippet;
            });
            const snippet = snippets.join("\n\n");
            const [{ description }] = rawReactDocs;
            const lang = this.tsExtensions.includes(path_1.default.extname(context.path))
                ? "tsx" /* ReactTSX */
                : "jsx" /* ReactJSX */;
            return { description, snippet, lang };
        });
    }
    supports(x) {
        const fileExtension = path_1.default.extname(x.path);
        return this.supportedFileExtensions.includes(fileExtension);
    }
    generateSnippet(preparedComponentDoc) {
        return this.template(preparedComponentDoc);
    }
    parseUsingReactDocgen(file, filePath) {
        const rawReactDocs = react_docgen_1.parse(file, this.resolver, null, {
            filename: filePath,
            babelrc: false
        });
        const propsFilter = (props, name) => !!(props[name].type || props[name].tsType || props[name].flowType);
        return {
            rawReactDocs: Array.isArray(rawReactDocs) ? rawReactDocs : [rawReactDocs],
            propsFilter
        };
    }
    parseUsingReactDocgenTypescript(filePath) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const tsConfigPath = path_1.default.resolve(this.config.tsConfigPath);
            const parserOpts = {
                shouldExtractLiteralValuesFromEnum: true,
                shouldRemoveUndefinedFromOptional: true,
                propFilter: {
                    skipPropsWithoutDoc: false
                }
            };
            let parser;
            if (!this.reactTsDocgen) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug("Importing react-docgen-typescript package");
                this.reactTsDocgen = yield Promise.resolve().then(() => __importStar(require("react-docgen-typescript")));
            }
            if (yield fs_extra_1.pathExists(tsConfigPath)) {
                parser = this.reactTsDocgen.withCustomConfig(tsConfigPath, parserOpts);
            }
            else {
                parser = this.reactTsDocgen.withDefaultConfig(parserOpts);
            }
            const rawReactDocs = parser.parse(filePath);
            const propsFilter = (props, name) => !!props[name].type;
            return {
                rawReactDocs,
                propsFilter
            };
        });
    }
}
exports.default = default_1;
