
/** @public */
export declare interface BitbucketConfig extends GitConfig {
    /** Project name that the repo belongs to */
    project?: string;
    /** User name that the repo belongs to*/
    user?: string;
}

/**
 * Union of {@link ComponentConfigBase} and {@link ComponentConfigCustom}
 *
 * @public
 */
export declare type ComponentConfig = ComponentConfigBase & ComponentConfigCustom;

/**
 * Contains basic configuration for a component.
 *
 * @public
 */
export declare interface ComponentConfigBase {
    /** Path to the file, relative to project folder. */
    path: string;
    /** Zeplin component names related to this component file */
    zeplinNames?: string[];
    /** Zeplin component source IDs related to this component file */
    zeplinIds?: string[];
    /** Name for the component */
    name?: string;
    /** Styleguidist name for the component (Optional) */
    styleguidist?: StyleguidistComponentConfig;
}

/**
 * Custom key/value configuration for a component.
 * Can be used to compose custom links for components
 * or can be processed by plugins for custom usage.
 *
 * @public
 */
export declare interface ComponentConfigCustom {
    [key: string]: CustomUrlConfig | unknown;
}

/**
 * Component configuration structure
 *
 * @public
 */
export declare interface ComponentConfigFile {
    /** Zeplin project IDs which the components belong to */
    projects?: string[];

    /** Zeplin styleguide IDs which the components belong to */
    styleguides?: string[];

    /** {@inheritdoc LinkConfig} */
    links?: LinkConfig[];

    /** {@inheritdoc ComponentConfig} */
    components: ComponentConfig[];

    /** {@link Plugin | Plugin} names and their configurations */
    plugins?: Plugin_2[];

    /** {@link GitConfig} */
    github?: GitConfig;
    bitbucket?: BitbucketConfig;
    gitlab?: GitConfig;
}

/**
 * Contains processed component data
 *
 * @public
 */
export declare interface ComponentData {
    /** Description of the component */
    description?: string;
    /** Language of the snippet for highlighting */
    lang?: PrismLang;
    /** Code snippet of the component */
    snippet?: string;
    /** {@inheritdoc Link} */
    links?: Link[];
}

/**
 * Interface for Zeplin CLI Connected Components plugins
 *
 * @public
 */
export declare interface ConnectPlugin {
    /**
     * CLI invokes this method once the package is loaded.
     * PluginContext contains arbitrary configuration set for the plugin
     * on components config file.
     *
     * This method is optional. Implement it to initialize plugin locals etc.
     * based on plugin configuration.
     *
     *
     * @param pluginContext - {@link PluginContext}
     */
    init?(pluginContext: PluginContext): Promise<void>;

    /**
     * CLI invokes this method for each component in the configration file.
     *
     * @param componentConfig - {@link ComponentConfig}
     * @returns - {@link ComponentData}
    */
    process(componentConfig: ComponentConfig): Promise<ComponentData>;

    /**
     * CLI invokes this method for each component in the configuration file
     * to determine if this plugin should process this component
     *
     * @param componentConfig - {@link ComponentConfig}
     * @returns true if the plugin supports the component, false otherwise
    */
    supports(componentConfig: ComponentConfig): boolean;
}

/**
 * Use it as a value of {@link ComponentConfigCustom} keys for custom link composition
 *
 * @public
 */
export declare interface CustomUrlConfig {
    urlPath: string;
}

/** @public */
export declare interface GitConfig {
    /** Repository name */
    repository: string;
    /**
     * Branch name
     * @defaultValue master
     */
    branch?: string;
    /**
     * Custom hostname for self-hosted Git repository
     */
    url?: string;
    /**
     * Optional path to the project on monorepos.
     */
    path?: string;
}

/**
 * @public
 */
export declare interface LeveledLogMethod {
    (message: string): void;
    (message: string, meta: unknown): void;
    (message: string, ...meta: any[]): void;
    (infoObject: object): void;
}

/**
 * Custom created link for a component
 *
 * @public
 */
export declare interface Link {
    /** Name of the link */
    name?: string;
    /** Full URL to the resource */
    url: string;
    /**
     * Type of the link.
     * Required to show a pretty link for certain types of links on Zeplin.
     */
    type: LinkType;
}

/**
 * Base URLs for custom link composition
 *
 * @public
 */
export declare interface LinkConfig {
    /** Name of the link */
    name?: string;
    /** Base URL to the resource */
    url: string;
    /** Type of the link */
    type: string;
}

/**
 * Link types for application link logo
 * Use `LinkType.custom` if you are not sure what to do
 * @public
 */
export declare const enum LinkType {
    styleguidist = "styleguidist",
    storybook = "storybook",
    github = "github",
    gitlab = "gitlab",
    bitbucket = "bitbucket",
    custom = "custom"
}

/**
 * Interface for Zeplin CLI's logger.
 *
 * @public
 */
export declare interface Logger {
    error: LeveledLogMethod;
    warn: LeveledLogMethod;
    info: LeveledLogMethod;
    debug: LeveledLogMethod;
}

/** @public */
declare interface Plugin_2 {
    /** npm package name of the plugin */
    name: string;
    /** {@inheritdoc PluginConfig} */
    config?: PluginConfig;
}
export { Plugin_2 as Plugin }

/**
 * Arbitrary key/values for custom plugin configuration.
 *
 * @public
 */
export declare interface PluginConfig {
    [key: string]: unknown;
}

/**
 * Contains custom plugin configuration and logger
 *
 * @public
 */
export declare interface PluginContext {
    /** {@inheritdoc PluginConfig} */
    config?: PluginConfig;
    /** {@inheritdoc ComponentConfig} */
    components: ComponentConfig[];
    logger: Logger;
}

/** @public */
export declare const enum PrismLang {
    Markup = "markup",
    HTML = "html",
    XML = "xml",
    SVG = "svg",
    CSS = "css",
    CSSExtras = "css-extras",
    CLike = "clike",
    JavaScript = "javascript",
    ActionScript = "actionscript",
    C = "c",
    CSharp = "cs",
    CPP = "cpp",
    CoffeeScript = "coffeescript",
    Dart = "dart",
    EJS = "ejs",
    Elm = "elm",
    ERB = "erb",
    Flow = "flow",
    FreeMarker = "ftl",
    Handlebars = "handlebars",
    Java = "java",
    Kotlin = "kotlin",
    Less = "less",
    LiveScript = "livescript",
    Markdown = "markdown",
    ObjectiveC = "objectivec",
    PHP = "php",
    Pug = "pug",
    Python = "python",
    R = "r",
    ReactJSX = "jsx",
    ReactTSX = "tsx",
    SASS = "sass",
    SCSS = "scss",
    Scala = "scala",
    Swift = "swift",
    TypeScript = "ts",
    Velocity = "velocity",
    YAML = "yaml"
}

/**
 * @public
 */
export declare interface StyleguidistComponentConfig {
    name: string;
}

export { }
