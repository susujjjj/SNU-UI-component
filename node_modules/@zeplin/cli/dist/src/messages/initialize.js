"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectComponentFilePrompt = exports.selectResourcePrompt = exports.chooseAtLeastOneComponentErrorMessage = exports.selectComponentPrompt = exports.initializationPrompt = exports.existingComponentPrompt = exports.addSummary = exports.initSummary = exports.userSelectedNotToInitialize = exports.notInitialized = exports.alreadyInitialized = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const defaults_1 = require("../config/defaults");
const connectCommandMessage = (ctx) => `${ctx.installGlobally ? "zeplin connect" : `${ctx.isYarn ? "yarn" : "npm run"} zeplin-connect`}`;
const componentLinksMessage = (ctx) => {
    var _a;
    const appUri = defaults_1.defaults.app.webURL === "https://app.zeplin.io" ? "zpl" : "zpl-test";
    const resourcePath = ctx.selectedResource.type === "Project" ? "projects" : "styleguides";
    const appResourceKey = ctx.selectedResource.type === "Project" ? "pid" : "stid";
    const resourceId = (_a = ctx.selectedResource) === null || _a === void 0 ? void 0 : _a._id;
    const componentId = ctx.selectedComponents[0]._id;
    return ts_dedent_1.default `
        Check out the component using the following links:
            Web: ${chalk_1.default.underline(`${defaults_1.defaults.app.webURL}/${resourcePath}/${resourceId}/components?coid=${componentId}`)}
            App: ${chalk_1.default.underline(`${appUri}://components?${appResourceKey}=${resourceId}&coid=${componentId}`)}

        Free free to make changes in ${chalk_1.default.underline(ctx.cliOptions.configFile)} and use the following command to update Connected Components!
            ${connectCommandMessage(ctx)}
    `;
};
const installPackagesMessage = (context) => {
    if (context.installGlobally) {
        return `${context.isYarn ? "yarn global add" : "npm -g install"} @zeplin/cli ${context.installedPlugins.join(" ")}`;
    }
    return `${context.isYarn ? "yarn" : "npm"} install`;
};
const connectSkipMessage = (ctx) => ts_dedent_1.default `
        ${chalk_1.default.inverse(`Connecting to Zeplin is skipped. Use the following commands to connect components:`)}
            ${connectCommandMessage(ctx)}
    `;
const skipMessage = (ctx) => {
    if (ctx.cliOptions.skipInstall) {
        return ts_dedent_1.default `
            ${chalk_1.default.inverse("Package installation is skipped.")}
            You should install all dependencies and then connect components using the following commands:
                ${installPackagesMessage(ctx)}
                ${connectCommandMessage(ctx)}
            `;
    }
    return connectSkipMessage(ctx);
};
exports.alreadyInitialized = "⚠️  Found an existing Connected Components configuration. Falling back to add-component command.";
exports.notInitialized = "⚠️  Looks like this project has no Connected Components configuration.";
exports.userSelectedNotToInitialize = ts_dedent_1.default `
        Operation aborted.
        Check the documentation for initialization and add-component details:
        https://github.com/zeplin/cli/blob/master/README.md"
    `;
exports.initSummary = (context) => {
    var _a;
    return ts_dedent_1.default `
        Configuration file is setup! 🎉
        ${chalk_1.default.underline(path_1.default.resolve(`${(_a = context.cliOptions) === null || _a === void 0 ? void 0 : _a.configFile}`))}

        ${context.skippedConnect ? skipMessage(context) : componentLinksMessage(context)}

        You can use the following command to add another component interactively:
            ${connectCommandMessage(context)} add-components
    `;
};
exports.addSummary = (context) => {
    var _a;
    return ts_dedent_1.default `
        All done! 🎉
        ${chalk_1.default.underline(path_1.default.resolve(`${(_a = context.cliOptions) === null || _a === void 0 ? void 0 : _a.configFile}`))}

        ${context.skippedConnect ? connectSkipMessage(context) : componentLinksMessage(context)}
    `;
};
exports.existingComponentPrompt = "Do you want to add an existing component into the configuration?";
exports.initializationPrompt = "Do you want to initialize Connected Components now?";
exports.selectComponentPrompt = "Which components would you like to connect?";
exports.chooseAtLeastOneComponentErrorMessage = "You must choose at least one Zeplin component.";
exports.selectResourcePrompt = "Which Zeplin project/styleguide would you like to setup?";
exports.selectComponentFilePrompt = "Select the component file:";
