#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const update_notifier_1 = __importDefault(require("update-notifier"));
const package_json_1 = require("../package.json");
const connect_1 = require("./commands/connect");
const initialize_1 = require("./commands/connect/initialize");
const login_1 = require("./commands/login");
const defaults_1 = require("./config/defaults");
const commander_2 = require("./util/commander");
const env_1 = require("./util/env");
const logger_1 = __importDefault(require("./util/logger"));
const addComponent_1 = require("./commands/connect/addComponent");
function beforeCommand() {
    const un = update_notifier_1.default({
        pkg: {
            name: package_json_1.name,
            version: package_json_1.version
        },
        updateCheckInterval: 0,
        shouldNotifyInNpmScript: true
    });
    un.notify();
}
function createCollector() {
    let cleared = false;
    function collectionValue(value, previous) {
        // Clear default values on first call
        if (!cleared) {
            cleared = true;
            return [value];
        }
        return previous.concat([value]);
    }
    return collectionValue;
}
const program = new commander_1.default.Command();
program
    .name(Object.keys(package_json_1.bin)[0])
    .version(package_json_1.version);
logger_1.default.info(`\nZeplin CLI - v${package_json_1.version}\n`);
const connectCommand = program.command("connect")
    .description("Connect components to code")
    .option("-f, --file <file>", "Full path to components file", createCollector(), defaults_1.defaults.commands.connect.filePaths)
    .option("-d, --dev", "Activate development mode", defaults_1.defaults.commands.connect.devMode)
    .option("--no-watch", "Disable watch files on development mode", defaults_1.defaults.commands.connect.devModeWatch)
    .option("-p, --plugin <plugin>", "npm package name of a Zeplin CLI connect plugin", createCollector(), [])
    .action(commander_2.commandRunner((options) => __awaiter(void 0, void 0, void 0, function* () {
    const connectOptions = {
        configFiles: options.file,
        devMode: options.dev,
        devModePort: defaults_1.defaults.commands.connect.port,
        devModeWatch: options.watch,
        plugins: options.plugin
    };
    yield connect_1.connect(connectOptions);
})));
connectCommand.command("delete")
    .description("Delete component connections from Zeplin")
    .option("-f, --file <file>", "Full path to components file", createCollector(), defaults_1.defaults.commands.connect.filePaths)
    .action(commander_2.commandRunner((options) => __awaiter(void 0, void 0, void 0, function* () {
    const connectDeleteOptions = {
        configFiles: options.file
    };
    yield connect_1.connectDelete(connectDeleteOptions);
})));
connectCommand.command("initialize")
    .description("Initialize Connected Components interactively")
    .option("--project-id <projectId>", "Initializes configuration for this project")
    .option("--styleguide-id <styleguideId>", "Initializes configuration for this styleguide")
    .option("--component-id <componentId>", "Initializes configuration for this Zeplin component")
    .option("--component-filename <componentFilename>", "Initializes configuration for this component file")
    .option("--type <type>", "Set project type manually", createCollector(), [])
    .option("--file <configFile>", "Optional file path to create configuration", defaults_1.defaults.commands.initialize.filePath)
    .option("--skip-connect", "Skip connecting after configuration is created", false)
    .option("--skip-install", "Skip installation of packages during installation", false)
    .action(commander_2.commandRunner((options) => __awaiter(void 0, void 0, void 0, function* () {
    const opts = {
        configFile: options.file,
        componentId: options.componentId,
        projectId: options.projectId,
        styleguideId: options.styleguideId,
        componentFilename: options.componentFilename,
        skipConnect: options.skipConnect,
        skipInstall: options.skipInstall,
        type: options.type
    };
    yield initialize_1.initialize(opts);
})));
connectCommand.command("add-components")
    .description("Add Connected Components interactively")
    .option("--project-id <projectId>", "Initializes configuration for this project")
    .option("--styleguide-id <styleguideId>", "Initializes configuration for this styleguide")
    .option("--component-id <componentId>", "Initializes configuration for this Zeplin component")
    .option("--filename <filename>", "Initializes configuration for this component file")
    .option("--file <configFile>", "Optional file path to create configuration", defaults_1.defaults.commands.initialize.filePath)
    .option("--skip-connect", "Skip connecting after configuration is created", false)
    .action(commander_2.commandRunner((options) => __awaiter(void 0, void 0, void 0, function* () {
    const opts = {
        configFile: options.file,
        componentId: options.componentId,
        projectId: options.projectId,
        styleguideId: options.styleguideId,
        componentFilename: options.filename,
        skipConnect: options.skipConnect
    };
    yield addComponent_1.addComponent(opts);
})));
const loginCommand = program.command("login")
    .description("Login to Zeplin")
    .option("--no-browser", "Skip browser login", defaults_1.defaults.commands.login.noBrowser)
    .action(commander_2.commandRunner((options) => __awaiter(void 0, void 0, void 0, function* () {
    const loginOptions = {
        noBrowser: options.noBrowser
    };
    yield login_1.login(loginOptions);
})));
// Configure common options
[
    connectCommand,
    loginCommand
].forEach(command => {
    command.option("--verbose", "Enable verbose logs");
    command.option("--ci", "Enforce CI mode (no prompts)");
    command.on("option:verbose", () => env_1.activateVerbose());
    command.on("option:ci", () => env_1.activateCI());
});
program.on("command:*", () => {
    program.outputHelp();
});
beforeCommand();
program.parseAsync(process.argv);
