"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.login = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../util/logger"));
const envUtil = __importStar(require("../../util/env"));
const authFileUtil = __importStar(require("../../util/auth-file"));
const service_1 = require("../../service");
function login(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const tokenFromEnv = envUtil.getAccessTokenFromEnv();
        if (tokenFromEnv) {
            logger_1.default.info(ts_dedent_1.default `${chalk_1.default.dim `ZEPLIN_ACCESS_TOKEN`} is already set.
                            Remove the environment variable to login via CLI.`);
        }
        else {
            const existingToken = yield authFileUtil.readAuthToken();
            if (existingToken) {
                const answer = yield inquirer_1.default.prompt([{
                        type: "input",
                        name: "choice",
                        message: "Do you want to overwrite existing authentication token? [y/N]"
                    }]);
                if (answer.choice !== "y") {
                    return;
                }
            }
            const authService = new service_1.AuthenticationService(existingToken
                ? {
                    token: existingToken,
                    method: service_1.AUTH_METHOD.LOCAL_AUTH_FILE
                }
                : undefined);
            yield authService.promptForLogin({
                ignoreSaveTokenErrors: false,
                noBrowser: options.noBrowser,
                forceRenewal: true
            });
            logger_1.default.info(chalk_1.default.bold("\nðŸ¦„ Successfully authenticated."));
        }
    });
}
exports.login = login;
