"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connect = exports.generateConnectedComponents = void 0;
const chalk_1 = __importDefault(require("chalk"));
const chokidar_1 = __importDefault(require("chokidar"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const logger_1 = __importDefault(require("../../util/logger"));
const path_1 = __importDefault(require("path"));
const text_1 = require("../../util/text");
const config_1 = require("./config");
const plugin_1 = require("./plugin");
const server_1 = require("./server");
const service_1 = require("./service");
const getComponentFilePaths = (connectedBarrels) => connectedBarrels.map(f => f.connectedComponents.map(c => path_1.default.resolve(c.path))).reduce((a, b) => [...a, ...b], []);
const generateConnectedComponents = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { configFiles, plugins } = options;
    const componentConfigFiles = yield config_1.getComponentConfigFiles(configFiles, plugins);
    logger_1.default.debug(`component config files: ${text_1.stringify(componentConfigFiles)}`);
    const connectedBarrels = yield plugin_1.connectComponentConfigFiles(componentConfigFiles);
    logger_1.default.debug(`connected barrels output: ${text_1.stringify(connectedBarrels)}`);
    return connectedBarrels;
});
exports.generateConnectedComponents = generateConnectedComponents;
const startDevServer = (options, connectedBarrels) => __awaiter(void 0, void 0, void 0, function* () {
    const { configFiles, devModePort, devModeWatch, plugins } = options;
    logger_1.default.info("Starting development serverâ€¦");
    const devServer = new server_1.ConnectDevServer(connectedBarrels);
    if (devModeWatch) {
        let componentFiles = getComponentFilePaths(connectedBarrels);
        const watcher = chokidar_1.default.watch([...configFiles, ...componentFiles], {
            cwd: process.cwd(),
            persistent: true,
            awaitWriteFinish: true
        });
        watcher.on("change", (filePath) => __awaiter(void 0, void 0, void 0, function* () {
            logger_1.default.info((chalk_1.default.yellow(`\nFile change detected ${filePath}.\n`)));
            try {
                const updatedConnectedBarrels = yield generateConnectedComponents({ configFiles, plugins });
                watcher.unwatch(componentFiles);
                devServer.updateConnectedBarrels(updatedConnectedBarrels);
                componentFiles = getComponentFilePaths(updatedConnectedBarrels);
                watcher.add(componentFiles);
            }
            catch (error) {
                logger_1.default.error(chalk_1.default.red(ts_dedent_1.default `
                    Could not update Connected Components.
                    ${error}
                `));
            }
        }));
    }
    yield devServer.listen(devModePort);
});
const service = new service_1.ConnectedComponentsService();
const upload = (connectedBarrels) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.default.info("Connecting all Connected Components into Zeplinâ€¦");
    yield service.uploadConnectedBarrels(connectedBarrels);
    logger_1.default.info("ðŸ¦„ Components successfully connected to components in Zeplin.");
});
function connect(options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            logger_1.default.debug(`connect options: ${text_1.stringify(options)}`);
            const connectedBarrels = yield generateConnectedComponents(options);
            if (options.devMode) {
                yield startDevServer(options, connectedBarrels);
            }
            else {
                yield upload(connectedBarrels);
            }
        }
        catch (error) {
            error.message = ts_dedent_1.default `
            ${chalk_1.default.bold `Connecting components to Zeplin components failed.`}

            ${chalk_1.default.redBright(text_1.indent(error.message))}
        `;
            throw error;
        }
    });
}
exports.connect = connect;
