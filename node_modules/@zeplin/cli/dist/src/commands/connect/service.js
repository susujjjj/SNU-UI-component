"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectedComponentsService = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const env_1 = require("../../util/env");
const api_1 = require("../../api");
const auth_1 = require("../../service/auth");
const logger_1 = __importDefault(require("../../util/logger"));
const error_1 = require("../../util/error");
class ConnectedComponentsService {
    constructor({ zeplinApi, authService } = {}) {
        this.zeplinApi = zeplinApi || new api_1.ZeplinApi();
        this.authService = authService || new auth_1.AuthenticationService();
    }
    uploadConnectedBarrels(connectedBarrelComponents) {
        return __awaiter(this, void 0, void 0, function* () {
            const requiredScopes = ["write"];
            try {
                const { token } = yield this.authService.authenticate({ requiredScopes });
                yield this.upload(token, connectedBarrelComponents);
            }
            catch (error) {
                if (error_1.isAuthenticationError(error)) {
                    if (env_1.isCI()) {
                        error.message = ts_dedent_1.default `
                    ${error.message}
                    Please update ${chalk_1.default.dim `ZEPLIN_ACCESS_TOKEN`} environment variable.`;
                    }
                    else {
                        logger_1.default.info(error.message);
                        const { token } = yield this.authService.promptForLogin({ requiredScopes, forceRenewal: true });
                        yield this.upload(token, connectedBarrelComponents);
                        return;
                    }
                }
                throw error;
            }
        });
    }
    deleteConnectedBarrels(connectedComponents) {
        return __awaiter(this, void 0, void 0, function* () {
            const requiredScopes = ["delete"];
            try {
                const { token } = yield this.authService.authenticate({ requiredScopes });
                yield this.delete(token, connectedComponents);
            }
            catch (error) {
                if (error_1.isAuthenticationError(error)) {
                    if (env_1.isCI()) {
                        error.message = ts_dedent_1.default `
                    ${error.message}
                    Please update ${chalk_1.default.dim `ZEPLIN_ACCESS_TOKEN`} environment variable.`;
                    }
                    else {
                        logger_1.default.info(error.message);
                        const { token } = yield this.authService.promptForLogin({ requiredScopes, forceRenewal: true });
                        yield this.delete(token, connectedComponents);
                        return;
                    }
                }
                throw error;
            }
        });
    }
    upload(authToken, connectedBarrelComponents) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(connectedBarrelComponents.map((connectedBarrelComponent) => __awaiter(this, void 0, void 0, function* () {
                // TODO upload progress on console
                yield Promise.all(connectedBarrelComponent.projects.map((pid) => __awaiter(this, void 0, void 0, function* () {
                    yield this.zeplinApi.uploadConnectedComponents(authToken, { barrelId: pid, barrelType: "projects" }, { connectedComponents: connectedBarrelComponent.connectedComponents });
                })));
                yield Promise.all(connectedBarrelComponent.styleguides.map((stid) => __awaiter(this, void 0, void 0, function* () {
                    yield this.zeplinApi.uploadConnectedComponents(authToken, { barrelId: stid, barrelType: "styleguides" }, { connectedComponents: connectedBarrelComponent.connectedComponents });
                })));
            })));
        });
    }
    delete(authToken, connectedComponents) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(connectedComponents.map((connectedBarrelComponent) => __awaiter(this, void 0, void 0, function* () {
                // TODO delete progress on console
                yield Promise.all(connectedBarrelComponent.projects.map((pid) => __awaiter(this, void 0, void 0, function* () {
                    yield this.zeplinApi.deleteConnectedComponents(authToken, { barrelId: pid, barrelType: "projects" });
                })));
                yield Promise.all(connectedBarrelComponent.styleguides.map((stid) => __awaiter(this, void 0, void 0, function* () {
                    yield this.zeplinApi.deleteConnectedComponents(authToken, { barrelId: stid, barrelType: "styleguides" });
                })));
            })));
        });
    }
}
exports.ConnectedComponentsService = ConnectedComponentsService;
