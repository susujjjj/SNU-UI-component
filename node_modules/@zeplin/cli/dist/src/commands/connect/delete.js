"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectDelete = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const logger_1 = __importDefault(require("../../util/logger"));
const text_1 = require("../../util/text");
const config_1 = require("./config");
const service_1 = require("./service");
const service = new service_1.ConnectedComponentsService();
const deleteConnectedBarrels = (connectedBarrels) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.default.info("Deleting Connected Components from Zeplinâ€¦");
    yield service.deleteConnectedBarrels(connectedBarrels);
    logger_1.default.info("ðŸ”¥ Component connections successfully deleted from components in Zeplin.");
});
const getConnectedBarrels = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { configFiles } = options;
    const componentConfigFiles = yield config_1.getComponentConfigFiles(configFiles, []);
    return componentConfigFiles.map(ccf => ({
        projects: ccf.projects || [],
        styleguides: ccf.styleguides || []
    }));
});
function connectDelete(options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const barrels = yield getConnectedBarrels({ configFiles: options.configFiles });
            yield deleteConnectedBarrels(barrels);
        }
        catch (error) {
            error.message = ts_dedent_1.default `
            ${chalk_1.default.bold `Deleting Connected Components from Zeplin components failed.`}

            ${chalk_1.default.redBright(text_1.indent(error.message))}
        `;
            throw error;
        }
    });
}
exports.connectDelete = connectDelete;
