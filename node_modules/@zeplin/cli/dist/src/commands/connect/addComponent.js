"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addComponent = void 0;
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const tasks_1 = require("../../tasks");
const task_1 = require("../../util/task");
const text_1 = require("../../util/text");
const service_1 = require("../../service");
const service_2 = require("./service");
const logger_1 = __importDefault(require("../../util/logger"));
const messages_1 = require("../../messages");
const config_1 = require("./config");
const initialize_1 = require("./initialize");
const commander_1 = require("../../util/commander");
const askForInitialization = () => __awaiter(void 0, void 0, void 0, function* () {
    const { confirmation } = yield inquirer_1.default.prompt([{
            type: "confirm",
            message: messages_1.initializationPrompt,
            default: false,
            name: "confirmation"
        }]);
    return confirmation;
});
function addComponent(options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            logger_1.default.debug(`add-commponents options: ${text_1.stringify(options)}`);
            const authService = new service_1.AuthenticationService();
            const connectService = new service_2.ConnectedComponentsService({ authService });
            const context = Object.assign(Object.create(null), {
                cliOptions: options
            }, {
                authService,
                connectService
            });
            const [existingConfigFile] = yield config_1.getComponentConfigFiles([context.cliOptions.configFile])
                .catch(err => {
                logger_1.default.debug(err.stack);
                return [];
            });
            if (!existingConfigFile) {
                logger_1.default.info(messages_1.notInitialized);
                if (!(yield askForInitialization())) {
                    logger_1.default.info(messages_1.userSelectedNotToInitialize);
                    return;
                }
                return commander_1.commandRunner(() => initialize_1.initialize(options))();
            }
            context.configFile = existingConfigFile;
            const workflow = new task_1.Workflow({
                context,
                tasks: [
                    tasks_1.authentication,
                    tasks_1.selectResource,
                    tasks_1.selectComponent,
                    tasks_1.selectFile,
                    tasks_1.detectEnvironment,
                    tasks_1.addComponentConfig,
                    tasks_1.connectComponents
                ]
            });
            yield workflow.run();
            logger_1.default.info(messages_1.addSummary(context));
        }
        catch (error) {
            error.message = ts_dedent_1.default `
            ${chalk_1.default.bold `Adding connected component failed.`}

            ${chalk_1.default.redBright(text_1.indent(error.message))}
        `;
            throw error;
        }
    });
}
exports.addComponent = addComponent;
