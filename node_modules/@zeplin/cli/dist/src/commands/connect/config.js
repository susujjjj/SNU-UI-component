"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentConfigFiles = void 0;
const cosmiconfig_1 = require("cosmiconfig");
const strip_comments_1 = __importDefault(require("strip-comments"));
const joi_1 = __importDefault(require("@hapi/joi"));
const chalk_1 = __importDefault(require("chalk"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const path_1 = __importDefault(require("path"));
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../util/logger"));
const file_1 = require("../../util/file");
const linkConfigSchema = joi_1.default.object({
    type: joi_1.default.string(),
    name: joi_1.default.string().optional(),
    url: joi_1.default.string()
});
const componentConfigSchema = joi_1.default.object({
    path: joi_1.default.string(),
    zeplinNames: joi_1.default.array().items(joi_1.default.string()).optional(),
    zeplinIds: joi_1.default.array().items(joi_1.default.string()).optional(),
    name: joi_1.default.string().optional(),
    styleguidist: joi_1.default.object({
        name: joi_1.default.string()
    }).optional()
}).or("zeplinNames", "zeplinIds");
const gitConfigSchema = joi_1.default.object({
    repository: joi_1.default.string(),
    branch: joi_1.default.string().optional(),
    url: joi_1.default.string().optional(),
    path: joi_1.default.string().optional()
});
const bitbucketConfigSchema = joi_1.default.object({
    repository: joi_1.default.string(),
    branch: joi_1.default.string().optional(),
    url: joi_1.default.string().optional(),
    path: joi_1.default.string().optional(),
    project: joi_1.default.string().optional(),
    user: joi_1.default.string().optional()
}).xor("project", "user");
const pluginSchema = joi_1.default.object({
    name: joi_1.default.string(),
    config: joi_1.default.object().unknown().optional()
});
const componentConfigFileSchema = joi_1.default.object({
    projects: joi_1.default.array().items(joi_1.default.string()).optional(),
    styleguides: joi_1.default.array().items(joi_1.default.string()).optional(),
    plugins: joi_1.default.array().items(pluginSchema).optional(),
    links: joi_1.default.array().items(linkConfigSchema).optional(),
    components: joi_1.default.array().items(componentConfigSchema).min(1),
    github: gitConfigSchema.optional(),
    gitlab: gitConfigSchema.optional(),
    bitbucket: bitbucketConfigSchema.optional()
}).custom((value, helpers) => {
    if (value.projects && value.styleguides) {
        if (value.projects.length === 0 && value.styleguides.length === 0) {
            throw new Error("at least one of `projects` or `styleguides` properties must contain 1 item.");
        }
    }
    else if (value.projects) {
        if (value.projects.length === 0) {
            throw new Error("`projects` must contain at least 1 item.");
        }
    }
    else if (value.styleguides) {
        if (value.styleguides.length === 0) {
            throw new Error("`styleguides` must contain at least 1 item.");
        }
    }
    else {
        return helpers.error("object.missing", { peersWithLabels: ["projects", "styleguides"] });
    }
    return value;
});
const validateConfigSchema = (config, params) => {
    const { error, value } = componentConfigFileSchema.validate(config, { allowUnknown: true, presence: "required" });
    const relativeFilePath = file_1.getAsRelativePath(params.filePath);
    if (error) {
        throw new errors_1.CLIError(`Oops! Looks like ${relativeFilePath} has some problems: ${error.message}`);
    }
    return value;
};
const configExplorerOptions = {
    searchPlaces: [
        "components.json",
        "components.yaml",
        "components.config.js"
    ],
    stopDir: process.cwd(),
    loaders: {
        ".json": (_filePath, content) => {
            const stripped = strip_comments_1.default(content);
            return JSON.parse(stripped);
        }
    },
    // Caching causes add-components command to exclude the added component in the update request
    cache: false
};
const configExplorer = cosmiconfig_1.cosmiconfig("@zeplin/cli", configExplorerOptions);
const getComponentConfigFile = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    let result;
    const relativeFilePath = file_1.getAsRelativePath(filePath);
    try {
        result = yield configExplorer.load(filePath);
    }
    catch (err) {
        throw new errors_1.CLIError(`Cannot access ${relativeFilePath}: ${err.message}`);
    }
    if (!result || result.isEmpty) {
        throw new errors_1.CLIError(`Oops! Looks like ${relativeFilePath} is empty.`);
    }
    const { config } = result;
    return validateConfigSchema(config, { filePath });
});
const discoverDefaultConfigFile = (configRootDir) => __awaiter(void 0, void 0, void 0, function* () {
    let discoveredConfigFile;
    try {
        const searchFrom = path_1.default.join(configRootDir, ".zeplin");
        discoveredConfigFile = yield configExplorer.search(searchFrom);
    }
    catch (err) {
        logger_1.default.debug(`Failed configuration file discovery: ${err.message}`);
    }
    if (!discoveredConfigFile) {
        logger_1.default.debug("Could not find a configuration file during discovery");
        return null;
    }
    const { config, filepath } = discoveredConfigFile;
    return validateConfigSchema(config, { filePath: filepath });
});
const getComponentConfigFiles = (configFilePaths = [], globalPlugins = [], configRootDir = process.cwd()) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let configFiles;
        /**
         * If config file path array is not empty, use only the specified config files.
         *
         * If no config file was specified by the user, try to discover default configurtation
         * file.
         */
        if (configFilePaths.length > 0) {
            configFiles = yield Promise.all(configFilePaths.map(configFile => getComponentConfigFile(configFile)));
        }
        else {
            const defaultConfigFile = yield discoverDefaultConfigFile(configRootDir);
            if (!defaultConfigFile) {
                throw new Error(ts_dedent_1.default `
                    Missing configuration file!
                    Please refer to ${chalk_1.default.underline `https://zpl.io/connected-components`} to create a configuration file.
                `);
            }
            configFiles = [defaultConfigFile];
        }
        /**
         * Global plugins and plugins from the config files may contain the same plugin
         * Filter global plugin instances to avoid duplicate plugin invocation.
         *
         * Favor plugins from config file against plugins from commandline args
         * since config file may have custom plugin configuration.
         */
        return configFiles.map(configFile => {
            const plugins = configFile.plugins || [];
            const pluginNamesFromConfigFile = plugins.map(p => p.name);
            globalPlugins.forEach(globalPlugin => {
                if (pluginNamesFromConfigFile.includes(globalPlugin)) {
                    logger_1.default.debug(`${globalPlugin} is defined using both config file and -p option.`);
                }
                else {
                    plugins.push({ name: globalPlugin });
                }
            });
            configFile.plugins = plugins;
            return configFile;
        });
    }
    catch (error) {
        throw new errors_1.CLIError(error.message);
    }
});
exports.getComponentConfigFiles = getComponentConfigFiles;
