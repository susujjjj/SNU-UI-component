"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginServer = void 0;
const express_1 = __importDefault(require("express"));
const http_status_codes_1 = require("http-status-codes");
const defaults_1 = require("../config/defaults");
const errors_1 = require("../errors");
const logger_1 = __importDefault(require("../util/logger"));
class LoginServer {
    constructor(redirectPath) {
        this.stopped = false;
        this.connections = [];
        this.redirectPath = redirectPath;
    }
    start(port) {
        var _a;
        if ((_a = this.server) === null || _a === void 0 ? void 0 : _a.listening) {
            return Promise.resolve(this.server);
        }
        const app = express_1.default();
        // CORS
        app.use((req, res, next) => {
            res.header("Access-Control-Allow-Origin", defaults_1.defaults.app.webURL);
            res.header("Access-Control-Allow-Headers", "*");
            res.header("Access-Control-Allow-Methods", "GET");
            if (req.method === "OPTIONS") {
                res.sendStatus(http_status_codes_1.OK);
            }
            else {
                next();
            }
        });
        app.get(this.redirectPath, (req, res) => __awaiter(this, void 0, void 0, function* () {
            this.accessToken = req.query.access_token;
            if (!this.accessToken) {
                res.status(http_status_codes_1.BAD_REQUEST).json({ error: "No access token" });
            }
            else {
                res.status(http_status_codes_1.OK).json({ accessToken: this.accessToken });
            }
            yield this.stop();
        }));
        const errorHandler = (err, _req, res, next) => {
            if (!res.headersSent) {
                res.status((err === null || err === void 0 ? void 0 : err.statusCode) || http_status_codes_1.INTERNAL_SERVER_ERROR).json({
                    detail: (err === null || err === void 0 ? void 0 : err.message) || "Unexpected Error",
                    title: (err === null || err === void 0 ? void 0 : err.title) || "Unexpected Error"
                });
            }
            next(err);
        };
        app.use(errorHandler);
        return new Promise((resolve, reject) => {
            this.server = app.listen(port)
                .on("listening", () => {
                logger_1.default.debug(`Started auth server on port ${port}`);
                resolve(this.server);
            })
                .on("error", (err) => {
                if (err.code === "EADDRINUSE") {
                    reject(new errors_1.CLIError(`Port ${port} is already in use.`));
                }
            })
                .on("connection", connection => {
                this.connections.push(connection);
                connection.on("close", () => (this.connections = this.connections.filter(curr => curr !== connection)));
            });
        });
    }
    stop() {
        if (this.stopped) {
            return Promise.resolve();
        }
        logger_1.default.debug("Stopping auth server.");
        this.stopped = true;
        this.connections.forEach(conn => conn.end());
        return new Promise((resolve) => {
            var _a;
            (_a = this.server) === null || _a === void 0 ? void 0 : _a.close(() => {
                logger_1.default.debug("Stopped auth server.");
                resolve();
            });
        });
    }
    waitForToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.start(params.port);
            return new Promise((resolve) => {
                var _a;
                process.on("SIGINT", () => __awaiter(this, void 0, void 0, function* () {
                    yield this.stop();
                }));
                (_a = this.server) === null || _a === void 0 ? void 0 : _a.on("close", () => resolve(this.accessToken));
            });
        });
    }
}
exports.LoginServer = LoginServer;
