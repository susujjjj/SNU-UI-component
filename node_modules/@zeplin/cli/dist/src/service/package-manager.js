"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPackages = exports.getLatestVersions = void 0;
const has_yarn_1 = __importDefault(require("has-yarn"));
const latest_version_1 = __importDefault(require("latest-version"));
const semver_1 = __importDefault(require("semver"));
const CLIError_1 = require("../errors/CLIError");
const command_1 = require("../util/command");
const logger_1 = __importDefault(require("../util/logger"));
function getLatestVersionUsingNpm(packageName) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const out = (yield command_1.runCommand(`npm view ${packageName} versions --json`)) || "[]";
            const versions = Array.from(JSON.parse(out));
            const latestStable = versions.reverse().find(v => { var _a; return ((_a = semver_1.default.parse(v)) === null || _a === void 0 ? void 0 : _a.prerelease.length) === 0; });
            if (!latestStable) {
                throw new CLIError_1.CLIError("Could not find latest version on the list");
            }
            return latestStable;
        }
        catch (err) {
            logger_1.default.debug(err.stack);
            throw new CLIError_1.CLIError("Could not get latest version");
        }
    });
}
function getLatestVersion(packageName) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield latest_version_1.default(packageName);
        }
        catch (err) {
            logger_1.default.debug(`Error occurrent on latest-version package: ${err.stack}`);
            return getLatestVersionUsingNpm(packageName);
        }
    });
}
function getLatestVersions(packages) {
    return __awaiter(this, void 0, void 0, function* () {
        const versions = {};
        yield Promise.all(packages.map((p) => __awaiter(this, void 0, void 0, function* () {
            versions[p] = yield getLatestVersion(p);
        })));
        return versions;
    });
}
exports.getLatestVersions = getLatestVersions;
function installPackages(packages, { installGlobal = false } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const yarn = has_yarn_1.default();
        const args = [];
        const npmClient = yarn ? "yarn" : "npm";
        if (yarn) {
            if (installGlobal) {
                args.push("global");
            }
            else {
                args.push("--ignore-workspace-root-check", "--dev");
            }
            args.push("add");
        }
        else {
            args.push("install");
            if (installGlobal) {
                args.push("--global");
            }
            else {
                args.push("--save-dev");
            }
        }
        const packagesWithVersions = Object.keys(packages).map(p => `${p}@${packages[p]}`);
        const command = `${npmClient} ${args.join(" ")} ${packagesWithVersions.join(" ")}`;
        yield command_1.runCommand(command);
    });
}
exports.installPackages = installPackages;
