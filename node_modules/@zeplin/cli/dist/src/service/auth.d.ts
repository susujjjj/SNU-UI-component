import { ZeplinApi } from "../api";
import { LoginServer } from "../server";
export declare enum AUTH_METHOD {
    ENVIRONMENT_VARIABLE = 0,
    LOCAL_AUTH_FILE = 1,
    LOGIN_WITH_PROMPT = 2,
    LOGIN_WITH_BROWSER = 3,
    UNKNOWN = 4
}
export interface Authentication {
    token: string;
    method: AUTH_METHOD;
}
export declare class AuthenticationService {
    authentication?: Authentication;
    zeplinApi: ZeplinApi;
    loginServer: LoginServer;
    constructor(authentication?: Authentication);
    authenticate({ requiredScopes, noBrowser }?: {
        requiredScopes?: string[];
        noBrowser?: boolean;
    }): Promise<Authentication>;
    validateToken({ requiredScopes }?: {
        requiredScopes?: string[];
    }): Authentication;
    revokeToken(): Promise<void>;
    promptForLogin({ requiredScopes, ignoreSaveTokenErrors, noBrowser, forceRenewal }?: {
        requiredScopes?: string[];
        ignoreSaveTokenErrors?: boolean;
        noBrowser?: boolean;
        forceRenewal?: boolean;
    }): Promise<Authentication>;
    promptForBrowserLogin(): Promise<Authentication>;
    promptForCLILogin(): Promise<Authentication>;
}
