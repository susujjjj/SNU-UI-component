"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.storybookConfiguratorFactory = void 0;
const storybook_1 = require("../storybook");
const semver_1 = require("semver");
const commander_1 = require("commander");
const logger_1 = __importDefault(require("../../../util/logger"));
const dependency_1 = require("../../../util/js/dependency");
const defaultHost = "localhost";
const defaultPort = "9009";
function storybookConfiguratorFactory() {
    return (packageJson) => {
        const config = {
            url: `http://${defaultHost}:${defaultPort}/`
        };
        if (packageJson) {
            const [foundVersion] = storybook_1.supportedStorybookFrameworks.map(d => dependency_1.getDependencyVersion(packageJson, d));
            if (foundVersion && semver_1.gt(semver_1.minVersion(foundVersion), semver_1.minVersion("4"))) {
                config.format = "new";
            }
            if (packageJson.scripts) {
                const program = new commander_1.Command()
                    .option("-p, --port <port>")
                    .option("-h, --host <host>")
                    .option("--https")
                    .allowUnknownOption();
                const foundScript = Object.entries(packageJson.scripts)
                    .find(([, v]) => v.indexOf("start-storybook") !== -1);
                if (foundScript) {
                    const [scriptName, scriptValue] = foundScript;
                    logger_1.default.debug(`Found storybook script "${scriptName}": "${scriptValue}"`);
                    const sbCommand = (scriptValue.split("&&")
                        .reduce((prev, curr) => prev.concat(curr.split("||")), [])
                        .find(v => v.trim().startsWith("start-storybook"))) || "";
                    if (sbCommand) {
                        const sbArgs = sbCommand.split(" ").map(a => a.trim());
                        const { host, port, https } = program.parse(sbArgs, { from: "user" });
                        const protocol = https ? "https" : "http";
                        config.url = `${protocol}://${host || defaultHost}:${port || defaultPort}/`;
                        config.startScript = scriptName;
                    }
                }
            }
        }
        return config;
    };
}
exports.storybookConfiguratorFactory = storybookConfiguratorFactory;
