"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectGit = void 0;
const git_url_parse_1 = __importDefault(require("git-url-parse"));
const parse_git_config_1 = __importDefault(require("parse-git-config"));
const text_1 = require("../util/text");
const logger_1 = __importDefault(require("../util/logger"));
const GITHUB_SOURCE = "github.com";
const GITLAB_SOURCE = "gitlab.com";
const BITBUCKET_CLOUD_SOURCE = "bitbucket.org";
const BITBUCKET_SERVER_SOURCE = "bitbucket-server";
var GitSource;
(function (GitSource) {
    GitSource["github"] = "github";
    GitSource["gitlab"] = "gitlab";
    GitSource["bitbucket"] = "bitbucket";
})(GitSource || (GitSource = {}));
const gitSourceTypes = {
    [GITHUB_SOURCE]: GitSource.github,
    [GITLAB_SOURCE]: GitSource.gitlab,
    [BITBUCKET_CLOUD_SOURCE]: GitSource.bitbucket,
    [BITBUCKET_SERVER_SOURCE]: GitSource.bitbucket
};
const defaultBranches = [
    "master",
    "main"
];
const createBitbucketServerConfig = ({ host, repository, owner, branch }) => {
    const bitbucketServerConfig = {
        repository,
        url: `https://${host}`,
        branch
    };
    if (owner.startsWith("~")) {
        bitbucketServerConfig.user = owner;
    }
    else {
        bitbucketServerConfig.project = owner;
    }
    return bitbucketServerConfig;
};
function detectGit(params) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const gitConfig = yield parse_git_config_1.default({ expandKeys: true, path: params === null || params === void 0 ? void 0 : params.path });
        const remoteUrl = (_b = (_a = gitConfig === null || gitConfig === void 0 ? void 0 : gitConfig.remote) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.url;
        const branches = (gitConfig === null || gitConfig === void 0 ? void 0 : gitConfig.branch) || {};
        logger_1.default.debug(`Git remoteUrl: ${remoteUrl}`);
        if (remoteUrl) {
            const branch = Object.keys(branches).find(b => defaultBranches.includes(b));
            logger_1.default.debug(`Git default branch: ${branch}`);
            const { owner, name: repository, source, resource: host, protocol } = git_url_parse_1.default(remoteUrl);
            let config;
            let isSelfHosted = false;
            let type = gitSourceTypes[source];
            if (!type) {
                type = Object.keys(GitSource).find(gs => host.includes(gs));
                if (type) {
                    isSelfHosted = true;
                }
            }
            logger_1.default.debug(`Git configuration: ${text_1.stringify({
                owner,
                repository,
                source,
                host,
                protocol,
                type,
                isSelfHosted
            })}`);
            if (type) {
                if (source === BITBUCKET_SERVER_SOURCE ||
                    (type === GitSource.bitbucket && isSelfHosted)) {
                    config = createBitbucketServerConfig({
                        host, repository, owner, branch
                    });
                }
                else {
                    config = Object.assign({ repository: `${owner}/${repository}` }, (isSelfHosted ? { url: `https://${host}` } : {}));
                }
                return { type, config };
            }
        }
        return null;
    });
}
exports.detectGit = detectGit;
