"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commandRunner = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const env_1 = require("./env");
const errors_1 = require("../errors");
const logger_1 = __importDefault(require("./logger"));
const process_1 = require("./process");
const errorHandler = (error) => {
    if (env_1.isVerbose()) {
        logger_1.default.error(`\n${chalk_1.default.redBright(error.stack)}`);
    }
    else {
        logger_1.default.error(`\n${chalk_1.default.redBright(error.message)}`);
        logger_1.default.debug(`${error.stack}`);
    }
    if (errors_1.CLIError.isCLIError(error) && error.details) {
        const errorDetails = JSON.stringify(error.details);
        if (env_1.isVerbose()) {
            logger_1.default.error(chalk_1.default.redBright(ts_dedent_1.default `
            Details:
            ${errorDetails}`));
        }
        else {
            logger_1.default.debug(`${errorDetails}`);
        }
    }
    const logFile = path_1.default.join(os_1.default.homedir(), ".zeplin", "cli.log");
    logger_1.default.info(`\nPlease check ${chalk_1.default.dim(logFile)} for details.\n`);
    return process_1.gracefulExit(1);
};
function commandRunner(fn) {
    return (...args) => __awaiter(this, void 0, void 0, function* () {
        try {
            yield fn(...args);
            yield process_1.gracefulExit();
        }
        catch (e) {
            yield errorHandler(e);
        }
    });
}
exports.commandRunner = commandRunner;
