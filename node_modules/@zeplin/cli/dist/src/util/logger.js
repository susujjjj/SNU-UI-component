"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.finishLogger = void 0;
const winston_1 = __importStar(require("winston"));
const os_1 = __importDefault(require("os"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const events_1 = require("events");
const fileTransport = new winston_1.default.transports.File({
    level: "silly",
    filename: "cli.log",
    maxsize: 1048576,
    maxFiles: 2,
    dirname: `${os_1.default.homedir()}/.zeplin`,
    tailable: true,
    format: winston_1.format.combine(winston_1.format.timestamp({
        format: "YYYY-MM-DD HH:mm:ss"
    }), winston_1.format.errors({ stack: true }), winston_1.format.splat(), winston_1.format.printf(m => strip_ansi_1.default(`${m.timestamp} - ${m.level} - ${m.message}${m.stack ? `\n${m.stack}` : ""}`)))
});
const consoleTransport = new winston_1.default.transports.Console({
    level: "info",
    stderrLevels: ["error"],
    format: winston_1.format.combine(winston_1.format.splat(), winston_1.format.printf(m => `${m.message}`))
});
const logger = winston_1.default.createLogger({
    transports: [
        fileTransport,
        consoleTransport
    ]
});
// Workaround to ensure all logs are written into the file before process exit
const fileLogWatcher = new events_1.EventEmitter();
fileTransport.on("open", () => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
    // @ts-ignore
    // eslint-disable-next-line no-underscore-dangle
    fileTransport._dest.on("finish", () => {
        fileLogWatcher.emit("finish");
    });
});
const finishLogger = () => new Promise((resolve) => {
    fileLogWatcher.on("finish", () => {
        resolve();
    });
    logger.end();
});
exports.finishLogger = finishLogger;
exports.default = logger;
