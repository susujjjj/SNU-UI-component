"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkdir = exports.writeJsonIntoFile = exports.readJsonFile = exports.pathExists = exports.getAsRelativePath = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
function getAsRelativePath(filePath) {
    return path_1.default.isAbsolute(filePath) ? path_1.default.relative(process.cwd(), filePath) : filePath;
}
exports.getAsRelativePath = getAsRelativePath;
function pathExists(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const resolvedFilePath = path_1.default.resolve(filePath);
        const exists = yield fs_extra_1.default.pathExists(resolvedFilePath);
        return exists;
    });
}
exports.pathExists = pathExists;
function readJsonFile(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const resolvedFilePath = path_1.default.resolve(filePath);
        if (!(yield fs_extra_1.default.pathExists(resolvedFilePath))) {
            throw new Error(`Cannot access file: ${filePath}`);
        }
        return fs_extra_1.default.readJson(resolvedFilePath, { encoding: "utf-8" });
    });
}
exports.readJsonFile = readJsonFile;
function writeJsonIntoFile(filePath, content) {
    return __awaiter(this, void 0, void 0, function* () {
        yield fs_extra_1.default.writeJson(filePath, content, {
            encoding: "utf-8",
            spaces: 2
        });
    });
}
exports.writeJsonIntoFile = writeJsonIntoFile;
function mkdir(directoryPath) {
    return __awaiter(this, void 0, void 0, function* () {
        yield fs_extra_1.default.mkdirp(directoryPath);
    });
}
exports.mkdir = mkdir;
