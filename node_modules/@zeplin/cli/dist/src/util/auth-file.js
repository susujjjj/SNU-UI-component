"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readAuthToken = exports.saveAuthToken = exports.getTokenFileName = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const file_1 = require("./file");
const logger_1 = __importDefault(require("../util/logger"));
const TOKEN_FILE_NAME = ".zeplinrc";
function getTokenFileName() {
    return path_1.default.join(os_1.default.homedir(), TOKEN_FILE_NAME);
}
exports.getTokenFileName = getTokenFileName;
function saveAuthToken(authToken) {
    return __awaiter(this, void 0, void 0, function* () {
        const tokenFilename = path_1.default.join(os_1.default.homedir(), TOKEN_FILE_NAME);
        yield file_1.writeJsonIntoFile(tokenFilename, { authToken });
    });
}
exports.saveAuthToken = saveAuthToken;
function readAuthToken() {
    return __awaiter(this, void 0, void 0, function* () {
        const tokenFilename = path_1.default.join(os_1.default.homedir(), TOKEN_FILE_NAME);
        let authToken;
        try {
            ({ authToken } = (yield file_1.readJsonFile(tokenFilename)));
        }
        catch (error) {
            logger_1.default.debug(`${error.stack}`);
        }
        return authToken;
    });
}
exports.readAuthToken = readAuthToken;
