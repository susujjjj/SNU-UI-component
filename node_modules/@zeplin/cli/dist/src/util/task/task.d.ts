import { TaskConstructor, TaskContext, TaskUITypes } from "./types";
export declare class Task<T = TaskContext> {
    private readonly steps;
    private readonly skipFn;
    private readonly spinner;
    private readonly errorHandler;
    private ui;
    private renderedUI?;
    private state;
    constructor(params: TaskConstructor<T>);
    isPending(): boolean;
    isCompleted(): boolean;
    isFailed(): boolean;
    isSkipped(): boolean;
    private renderUIText;
    /**
     * Update UI.
     *
     * Does not change current state of the task.
     *
     * @param {T} context Task context
     * @param {TaskUITypes<T>} ui New UI
     * @returns {void}
     */
    render(context: T, ui: TaskUITypes<T>): void;
    /**
     * Stops the spinner and changes it with skip symbol and persists
     *
     * Changes current state to SKIPPED.
     *
     * @param {T} context Task context
     * @param {TaskUITypes<T>} ui Persists this UI if provided.
     * @returns {void}
     */
    skip(context: T, ui?: TaskUITypes<T>): void;
    /**
     * Stops the spinner and changes it with failure symbol and persists
     *
     * Changes current state to FAILED.
     *
     * @param {T} context Task context
     * @param {TaskUITypes<T>} ui Persists this UI if provided.
     * @returns {void}
     */
    fail(context: T, ui?: TaskUITypes<T>): void;
    /**
     * Stops the spinner and changes it with succeed symbol and persists
     *
     * Changes current state to COMPLETED.
     *
     * @param {T} context Task context
     * @param {TaskUITypes<T>} ui Persists this UI if provided.
     * @returns {void}
     */
    complete(context: T, ui?: TaskUITypes<T>): void;
    isSpinning(): boolean;
    /**
     * Starts the spinner.
     *
     * No effect if the spinner is already started.
     *
     * Does not change current state of the task.
     *
     * @param {T} context Task context
     * @param {TaskUITypes<T>} ui Persists this UI if provided.
     * @returns {void}
     */
    startSpinner(context: T, ui?: TaskUITypes<T>): void;
    /**
     * Stops the spinner.
     *
     * Persists the given UI or clears the current spinner.
     * No effect if the spinner is already stopped.
     *
     * Does not change current state of the task.
     *
     * @param {T} context Task context
     * @param {TaskUITypes<T>} ui Persists this UI if provided.
     * @returns {void}
     */
    stopSpinner(context: T, ui?: TaskUITypes<T>): void;
    /**
     * Clears current task spinner
     *
     * @returns {void}
     */
    clearSpinner(): void;
    /**
     * Returns the current rendered text.
     *
     * @returns {String} Rendered text
     */
    getCurrentText(): string;
    run(context?: T): Promise<T>;
}
