import { Options as OraOptions } from "ora";
import { Task } from "./task";
export declare enum State {
    PENDING = 0,
    COMPLETED = 1,
    FAILED = 2,
    SKIPPED = 3
}
export declare type stringFn<T> = (ctx: T) => string;
export interface TaskUI<T = TaskContext> {
    readonly text?: string | stringFn<T>;
    readonly subtext?: string | stringFn<T>;
}
export declare type TaskUIFn<T> = stringFn<T> | ((context: T) => TaskUI<T>);
export declare type TaskUITypes<T> = void | string | TaskUI<T> | TaskUIFn<T>;
export declare type TaskContext = any;
export declare type TaskStep<T = TaskContext> = (ctx: T, task: Task<T>) => TaskUITypes<T> | Promise<TaskUITypes<T>>;
export declare type TaskSkipFunction<T> = (ctx: T) => boolean | TaskUITypes<T> | Promise<boolean | TaskUITypes<T>>;
export declare type TaskErrorHandler<T> = (err: Error, ctx: T, task: Task<T>) => never | void | Promise<never> | Promise<void>;
export interface TaskConstructor<T> {
    readonly steps: TaskStep<T>[];
    readonly initial?: TaskUITypes<T>;
    readonly skip?: TaskSkipFunction<T>;
    readonly spinnerOptions?: OraOptions;
    readonly errorHandler?: TaskErrorHandler<T>;
}
