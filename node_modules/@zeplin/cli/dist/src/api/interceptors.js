"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.interceptors = void 0;
const mask_json_1 = __importDefault(require("mask-json"));
const logger_1 = __importDefault(require("../util/logger"));
const url_1 = require("url");
const http_status_codes_1 = require("http-status-codes");
const blacklist = ["password", "token", "Zeplin-Access-Token", "Zeplin-Token", "Location"];
const blacklistedQueryParams = ["access_token"];
const mask = mask_json_1.default(blacklist, {
    ignoreCase: true
});
const maskUrl = (_url) => {
    let masked = _url;
    try {
        if (_url) {
            const url = new url_1.URL(_url);
            blacklistedQueryParams
                .filter(param => url.searchParams.has(param))
                .forEach(param => url.searchParams.set(param, "--REDACTED--"));
            masked = url.toString();
        }
    }
    catch (_a) {
        // Ignore
    }
    return masked;
};
const requestLogger = (request) => {
    const { url, method, data, headers } = request;
    let httpLog = `HTTP Request: ${method} ${maskUrl(url)}`;
    if (headers) {
        httpLog = httpLog.concat(`, Headers: ${JSON.stringify(mask(headers))}`);
    }
    if (data) {
        httpLog = httpLog.concat(`, Body: ${JSON.stringify(mask(data))}`);
    }
    logger_1.default.http(httpLog);
    return request;
};
const responseLogger = (response) => {
    const { config: { url, method }, status, statusText, headers, data } = response;
    let httpLog = `HTTP Response: ${method} ${maskUrl(url)}`
        .concat(`, Status: ${status}-${statusText}`);
    if (headers) {
        httpLog = httpLog.concat(`, Headers: ${JSON.stringify(mask(headers))}`);
    }
    if (data) {
        // 302 may contain sensitive query params
        if (status !== http_status_codes_1.MOVED_TEMPORARILY) {
            httpLog = httpLog.concat(`, Body: ${JSON.stringify(mask(data))}`);
        }
    }
    logger_1.default.http(httpLog);
    return response;
};
exports.interceptors = {
    request: [requestLogger],
    response: [responseLogger]
};
