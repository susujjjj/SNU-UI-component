"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeplinApi = void 0;
const axios_1 = __importDefault(require("axios"));
const defaults_1 = require("../config/defaults");
const interceptors_1 = require("./interceptors");
const errors_1 = require("../errors");
const http_status_codes_1 = require("http-status-codes");
const url_1 = require("url");
const LOGIN_URL = "/users/login";
const AUTHORIZE_URL = "/oauth/authorize";
const REVOKE_URL = "/oauth/revoke";
class ZeplinApi {
    constructor() {
        this.axios = axios_1.default.create({ baseURL: defaults_1.defaults.api.baseURL });
        interceptors_1.interceptors.request.forEach(x => this.axios.interceptors.request.use(x));
        interceptors_1.interceptors.response.forEach(x => this.axios.interceptors.response.use(x));
    }
    login(request) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axios.post(LOGIN_URL, {
                    handle: request.handle,
                    password: request.password
                });
                return response.data;
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    generateToken(zeplinToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axios.get(AUTHORIZE_URL, {
                    params: {
                        client_id: defaults_1.defaults.api.clientId,
                        response_type: "token",
                        scope: "read write delete"
                    },
                    headers: { "Zeplin-Token": zeplinToken },
                    maxRedirects: 0,
                    validateStatus: (status) => status === http_status_codes_1.MOVED_TEMPORARILY
                });
                const [, responseQueryParams] = response.headers.location.split("?");
                const responseParams = new url_1.URLSearchParams(responseQueryParams);
                return responseParams.get("access_token");
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    revokeToken(authToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.axios.post(REVOKE_URL, {}, {
                    headers: { "Zeplin-Access-Token": authToken }
                });
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    uploadConnectedComponents(authToken, params, body) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { barrelId, barrelType } = params;
                yield this.axios.put(`/public/cli/${barrelType}/${barrelId}/connectedcomponents`, body, {
                    headers: { "Zeplin-Access-Token": authToken }
                });
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    deleteConnectedComponents(authToken, params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { barrelId, barrelType } = params;
                yield this.axios.delete(`/public/cli/${barrelType}/${barrelId}/connectedcomponents`, {
                    headers: { "Zeplin-Access-Token": authToken }
                });
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    getProjects(authToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axios.get(`/public/cli/projects`, {
                    headers: { "Zeplin-Access-Token": authToken }
                });
                return response.data;
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    getProject(authToken, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axios.get(`/public/cli/projects/${projectId}`, {
                    headers: { "Zeplin-Access-Token": authToken }
                });
                return response.data;
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    getStyleguides(authToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axios.get(`/public/cli/styleguides`, {
                    headers: { "Zeplin-Access-Token": authToken }
                });
                return response.data;
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
    getStyleguide(authToken, styleguideId, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const headers = { "Zeplin-Access-Token": authToken };
                if (params) {
                    if (params.linkedProjectId) {
                        headers["zeplin-project-id"] = params.linkedProjectId;
                    }
                    else if (params.linkedStyleguideId) {
                        headers["zeplin-styleguide-id"] = params.linkedStyleguideId;
                    }
                }
                const response = yield this.axios.get(`/public/cli/styleguides/${styleguideId}`, { headers });
                return response.data;
            }
            catch (error) {
                if (error.isAxiosError) {
                    throw new errors_1.APIError(error.response);
                }
                throw new errors_1.CLIError(error.message);
            }
        });
    }
}
exports.ZeplinApi = ZeplinApi;
