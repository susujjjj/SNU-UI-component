"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectComponents = void 0;
const task_1 = require("../util/task");
const ui = __importStar(require("./ui/connect-components"));
const commands_1 = require("../commands");
const command_1 = require("../util/command");
const npx_1 = require("../util/npx");
const logger_1 = __importDefault(require("../util/logger"));
const checkConnectIsAllowed = (ctx, task) => {
    if (ctx.cliOptions.skipConnect) {
        logger_1.default.debug("Connect skipped due to --skip-connect flag");
        ctx.skippedConnect = true;
        task.skip(ctx, ui.skipConnect);
    }
    if (ctx.cliOptions.skipInstall) {
        logger_1.default.debug("Connect skipped due to --skip-install flag");
        ctx.skippedConnect = true;
        task.skip(ctx, ui.requiredPackagesAreNotInstalled);
    }
};
const checkAuthentication = (ctx) => {
    ctx.authService.validateToken({ requiredScopes: ["write"] });
};
const connect = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (ctx.installGlobally && ctx.installedPlugins.length > 0) {
        logger_1.default.debug("Running connect by spawning the CLI");
        yield command_1.runCommand(`zeplin connect --file ${ctx.cliOptions.configFile}`, {
            shell: true,
            env: Object.assign(process.env, { PATH: npx_1.removeNpxFromPath(process.env.PATH) })
        });
    }
    else {
        logger_1.default.debug("Running connect internally");
        const connectedComponents = yield commands_1.generateConnectedComponents({
            configFiles: [ctx.cliOptions.configFile]
        });
        yield ctx.connectService.uploadConnectedBarrels(connectedComponents);
    }
});
exports.connectComponents = new task_1.Task({
    steps: [
        checkConnectIsAllowed,
        checkAuthentication,
        connect,
        task_1.transitionTo(ui.completed)
    ],
    initial: ui.initial
});
