"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectResource = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const inquirer_search_list_1 = __importDefault(require("inquirer-search-list"));
const task_1 = require("../util/task");
const ui = __importStar(require("./ui/select-resource"));
const api_1 = require("../api");
const logger_1 = __importDefault(require("../util/logger"));
const errors_1 = require("../errors");
const inquirer_helpers_1 = require("../util/inquirer-helpers");
const error_1 = require("../util/task/error");
const array_1 = require("../util/array");
const messages_1 = require("../messages");
const text_1 = require("../util/text");
inquirer_1.default.registerPrompt("search-list", inquirer_search_list_1.default);
const zeplinApi = new api_1.ZeplinApi();
function createChoice(resource) {
    const name = resource.organization
        ? `${resource.organization.name}'s Workspace/${resource.name}`
        : `Personal Workspace/${resource.name}`;
    const choice = new inquirer_helpers_1.WorkaroundChoice(name, resource);
    return {
        name,
        value: choice
    };
}
const validateAuthencation = (ctx) => {
    ctx.authService.validateToken({ requiredScopes: ["read"] });
};
const retrieveResources = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const resources = {};
    try {
        const { projects } = yield zeplinApi.getProjects(ctx.auth.token);
        projects.forEach(p => {
            resources[p._id] = {
                _id: p._id,
                name: p.name,
                type: "Project",
                organization: p.organization
            };
        });
        const { styleguides } = yield zeplinApi.getStyleguides(ctx.auth.token);
        styleguides.forEach(s => {
            resources[s._id] = {
                _id: s._id,
                name: s.name,
                type: "Styleguide",
                organization: s.organization
            };
        });
        ctx.resources = resources;
    }
    catch (e) {
        logger_1.default.debug(e);
        throw new errors_1.CLIError("Could not get Zeplin resources.", e);
    }
});
const checkResourceFlags = (ctx, task) => {
    const resourceId = ctx.cliOptions.projectId || ctx.cliOptions.styleguideId;
    if (resourceId) {
        const foundResource = Object.values(ctx.resources).find(b => b._id === resourceId);
        if (foundResource) {
            logger_1.default.debug(`Found resource via params: ${text_1.stringify(foundResource)}`);
            ctx.selectedResource = foundResource;
            task.complete(ctx, ui.skippedSelection);
        }
        else {
            throw new error_1.TaskError(ui.noMatchingResource);
        }
    }
};
const select = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const choices = array_1.sortByField(Object.values(ctx.resources).map(b => createChoice(b)), "name");
    const { selection } = yield inquirer_1.default.prompt([{
            type: "search-list",
            name: "selection",
            pageSize: 5,
            choices,
            message: messages_1.selectResourcePrompt
        }]);
    ctx.selectedResource = ctx.resources[selection.value._id];
});
exports.selectResource = new task_1.Task({
    steps: [
        validateAuthencation,
        task_1.transitionTo(ui.retrieving),
        retrieveResources,
        checkResourceFlags,
        task_1.transitionTo(ui.select),
        task_1.pauseSpinningAndExecuteTask(select),
        task_1.transitionTo(ui.completed)
    ],
    initial: ui.initial
});
