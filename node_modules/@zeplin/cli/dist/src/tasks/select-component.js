"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectComponent = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const inquirer_search_checkbox_1 = __importDefault(require("inquirer-search-checkbox"));
const task_1 = require("../util/task");
const api_1 = require("../api");
const ui = __importStar(require("./ui/select-component"));
const error_1 = require("../util/task/error");
const array_1 = require("../util/array");
const messages_1 = require("../messages");
const logger_1 = __importDefault(require("../util/logger"));
const text_1 = require("../util/text");
inquirer_1.default.registerPrompt("search-checkbox", inquirer_search_checkbox_1.default);
const zeplinApi = new api_1.ZeplinApi();
function mapComponents(components = []) {
    return components.map(c => ({
        _id: c._id,
        name: c.name,
        sourceId: c.sourceId
    }));
}
function extractComponents(componentSections = []) {
    const components = [];
    componentSections.forEach(cs => {
        components.push(...(mapComponents(cs.components)));
        components.push(...extractComponents(cs.componentSections));
    });
    return components;
}
function getStyleguideComponents(authToken, styleguideId, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const styleguide = yield zeplinApi.getStyleguide(authToken, styleguideId, params);
        const components = extractComponents(styleguide.componentSections);
        if (styleguide.ancestors && styleguide.ancestors.length > 0) {
            const linkedResource = params || { linkedStyleguideId: styleguideId };
            const linkedStyleguides = yield Promise.all(styleguide.ancestors.map(linkedStid => zeplinApi.getStyleguide(authToken, linkedStid, linkedResource)));
            linkedStyleguides.forEach(s => components.push(...extractComponents(s.componentSections)));
        }
        return components;
    });
}
function getProjectComponents(authToken, projectId) {
    return __awaiter(this, void 0, void 0, function* () {
        const project = yield zeplinApi.getProject(authToken, projectId);
        const projectComponents = extractComponents(project.componentSections);
        if (project.styleguide) {
            const linkedStyleguideComponents = yield getStyleguideComponents(authToken, project.styleguide, { linkedProjectId: projectId });
            linkedStyleguideComponents.forEach(linkedComponent => projectComponents.push(linkedComponent));
        }
        return projectComponents;
    });
}
const validateAuthencation = (ctx) => {
    ctx.authService.validateToken({ requiredScopes: ["read"] });
};
const retrieveComponents = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const { selectedResource } = ctx;
    if (selectedResource.type === "Project") {
        ctx.components = yield getProjectComponents(ctx.auth.token, selectedResource._id);
    }
    else {
        ctx.components = yield getStyleguideComponents(ctx.auth.token, selectedResource._id);
    }
    if (!ctx.components || ctx.components.length === 0) {
        throw new error_1.TaskError(ui.foundNoComponents);
    }
});
const checkComponentFlag = (ctx, task) => {
    if (ctx.cliOptions.componentId) {
        const foundComponent = Object.values(ctx.components).find(b => b._id === ctx.cliOptions.componentId);
        if (foundComponent) {
            logger_1.default.debug(`Found component via params: ${text_1.stringify(foundComponent)}`);
            ctx.selectedComponents = [foundComponent];
            task.complete(ctx, ui.skippedSelection);
        }
        else {
            throw new error_1.TaskError(ui.noMatchingComponent);
        }
    }
};
const select = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const choices = array_1.sortByField(ctx.components.map(c => ({ name: c.name, value: c })), "name");
    const { selectedComponents } = yield inquirer_1.default.prompt([{
            type: "search-checkbox",
            name: "selectedComponents",
            pageSize: 5,
            choices,
            message: messages_1.selectComponentPrompt,
            validate: (answer) => {
                if (answer.length < 1) {
                    return messages_1.chooseAtLeastOneComponentErrorMessage;
                }
                return true;
            }
        }]);
    ctx.selectedComponents = selectedComponents;
});
exports.selectComponent = new task_1.Task({
    steps: [
        validateAuthencation,
        task_1.transitionTo(ui.retrieving),
        retrieveComponents,
        checkComponentFlag,
        task_1.transitionTo(ui.select),
        task_1.pauseSpinningAndExecuteTask(select),
        task_1.transitionTo(ui.completed)
    ],
    initial: ui.initial
});
