"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addComponentConfig = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const file_1 = require("../util/file");
const task_1 = require("../util/task");
const error_1 = require("../util/task/error");
const ui = __importStar(require("./ui/add-component-config"));
const messages_1 = require("../messages");
const logger_1 = __importDefault(require("../util/logger"));
const text_1 = require("../util/text");
const confirmAddExistingComponent = (ctx, task) => __awaiter(void 0, void 0, void 0, function* () {
    task.stopSpinner(ctx, ui.existingComponent);
    const { confirmation } = yield inquirer_1.default.prompt([{
            type: "confirm",
            message: messages_1.existingComponentPrompt,
            default: false,
            name: "confirmation"
        }]);
    task.startSpinner(ctx);
    return confirmation;
});
const addComponent = (ctx, task) => __awaiter(void 0, void 0, void 0, function* () {
    const { configFile: config, selectedResource: resource, selectedComponents } = ctx;
    logger_1.default.debug(`Add component config context: ${text_1.stringify({
        config, resource, selectedComponents
    })}`);
    if (resource.type === "Project") {
        if (config.projects && !config.projects.includes(resource._id)) {
            config.projects.push(resource._id);
        }
        else {
            config.projects = [resource._id];
        }
    }
    else if (config.styleguides && !config.styleguides.includes(resource._id)) {
        config.styleguides.push(resource._id);
    }
    else {
        config.styleguides = [resource._id];
    }
    const existingComponents = config.components || [];
    const componentNameExists = !!(existingComponents.map(ec => ec.zeplinNames)
        .find(existingZeplinName => selectedComponents.find(sc => existingZeplinName === null || existingZeplinName === void 0 ? void 0 : existingZeplinName.includes(sc.name))));
    const componentIdExists = !!(existingComponents.map(ec => ec.zeplinIds)
        .find(existingZeplinId => selectedComponents.find(sc => existingZeplinId === null || existingZeplinId === void 0 ? void 0 : existingZeplinId.includes(sc._id))));
    const componentWithSameFile = existingComponents.find(ec => ec.path === ctx.file.path);
    if ((componentNameExists || componentIdExists) &&
        !(yield confirmAddExistingComponent(ctx, task))) {
        throw new error_1.TaskError(ui.existingComponent);
    }
    const selectedComponentIds = selectedComponents.map(c => c._id);
    if (componentWithSameFile) {
        const existingZeplinIds = componentWithSameFile.zeplinIds || [];
        componentWithSameFile.zeplinIds = Array.from(new Set([
            ...existingZeplinIds,
            ...selectedComponentIds
        ]));
        logger_1.default.debug(`Added new component ID into existing component entry ${text_1.stringify(componentWithSameFile)}`);
    }
    else {
        const newComponent = {
            path: ctx.file.path,
            zeplinIds: selectedComponentIds
        };
        config.components = [
            ...existingComponents,
            newComponent
        ];
        logger_1.default.debug(`Added new component entry ${text_1.stringify(newComponent)}`);
    }
    logger_1.default.debug(`Updated config: ${text_1.stringify({ config })}`);
    yield file_1.writeJsonIntoFile(ctx.cliOptions.configFile, config);
});
exports.addComponentConfig = new task_1.Task({
    steps: [
        addComponent,
        task_1.transitionTo(ui.completed)
    ],
    initial: ui.initial
});
