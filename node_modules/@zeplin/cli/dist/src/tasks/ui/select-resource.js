"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.failed = exports.completed = exports.select = exports.skippedSelection = exports.noMatchingResource = exports.retrieving = exports.initial = void 0;
const chalk_1 = __importDefault(require("chalk"));
function resourceTypeName(ctx) {
    if (ctx.cliOptions.projectId && !ctx.cliOptions.styleguideId) {
        return "project";
    }
    else if (!ctx.cliOptions.projectId && ctx.cliOptions.styleguideId) {
        return "styleguide";
    }
    return "resource";
}
function resourceId(ctx) {
    return ctx.cliOptions.projectId || ctx.cliOptions.styleguideId || "";
}
exports.initial = () => ({
    text: "Select a Zeplin resource"
});
exports.retrieving = (ctx) => ({
    text: `Retrieving Zeplin ${resourceTypeName(ctx)}s...`
});
exports.noMatchingResource = (ctx) => ({
    text: `Could not find matching ${resourceTypeName(ctx)} ${chalk_1.default.cyan(resourceId(ctx))}`
});
exports.skippedSelection = (ctx) => ({
    text: `Selected ${ctx.selectedResource.type.toLowerCase()} ${chalk_1.default.cyan(ctx.selectedResource.name)}`,
    subtext: `You provided --${ctx.cliOptions.projectId
        ? `project-id=${ctx.cliOptions.projectId}`
        : `styleguide-id=${ctx.cliOptions.styleguideId}`}`
});
exports.select = () => ({
    text: "Select a Zeplin resource..."
});
exports.completed = (ctx) => ({
    text: `Selected ${ctx.selectedResource.type.toLowerCase()} ${ctx.selectedResource.name}`
});
exports.failed = () => ({
    text: "Failed to select a Zeplin resource"
});
