"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.failed = exports.authenticated = exports.authenticating = exports.alreadyAuthenticated = exports.initial = void 0;
const chalk_1 = __importDefault(require("chalk"));
const auth_1 = require("../../service/auth");
const authenticatedSubtext = (ctx) => {
    let subtext;
    switch (ctx.auth.method) {
        case auth_1.AUTH_METHOD.ENVIRONMENT_VARIABLE:
            subtext = `Authenticated using ${chalk_1.default.dim("ZEPLIN_ACCESS_TOKEN")} environment variable.`;
            break;
        case auth_1.AUTH_METHOD.LOGIN_WITH_BROWSER:
            subtext = `Authenticated using browser login.`;
            break;
        case auth_1.AUTH_METHOD.LOGIN_WITH_PROMPT:
            subtext = `Authenticated using user credentials.`;
            break;
        case auth_1.AUTH_METHOD.LOCAL_AUTH_FILE:
            subtext = `Authenticated using local authentication file.`;
            break;
        default:
            break;
    }
    return subtext;
};
exports.initial = () => ({
    text: "Getting authentication info..."
});
exports.alreadyAuthenticated = (ctx) => ({
    text: "Already authenticated",
    subtext: authenticatedSubtext(ctx)
});
exports.authenticating = () => ({
    text: "Authenticating..."
});
exports.authenticated = (ctx) => ({
    text: "Successfully authenticated",
    subtext: authenticatedSubtext(ctx)
});
exports.failed = () => ({
    text: "Could not find authentication token"
});
