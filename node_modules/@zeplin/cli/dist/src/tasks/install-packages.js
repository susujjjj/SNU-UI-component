"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPackage = void 0;
const task_1 = require("../util/task");
const ui = __importStar(require("./ui/install-packages"));
const package_manager_1 = require("../service/package-manager");
const config_1 = require("../util/js/config");
const package_1 = require("../util/package");
const object_1 = require("../util/object");
const logger_1 = __importDefault(require("../util/logger"));
const text_1 = require("../util/text");
const addZeplinScripts = (packageJson) => {
    packageJson.scripts = Object.assign(Object.assign({}, packageJson.scripts), { "zeplin-connect": "zeplin connect", "zeplin-connect-dev-mode": "zeplin connect --dev" });
};
const install = (ctx, task) => __awaiter(void 0, void 0, void 0, function* () {
    const projectTypes = ctx.projectTypes || [];
    const plugins = Array.from(new Set(projectTypes.reduce((p, c) => p.concat(c.installPackages || []), [])));
    ctx.installedPlugins = plugins;
    const packageNames = [
        "@zeplin/cli",
        ...plugins
    ];
    const packageNamesWithVersions = yield package_manager_1.getLatestVersions(packageNames);
    ctx.installedPackages = packageNamesWithVersions;
    let packageJson = yield config_1.getPackageJson();
    logger_1.default.debug(`Current package.json: ${text_1.stringify(packageJson)}`);
    const installGlobal = !packageJson;
    ctx.installGlobally = installGlobal;
    if (ctx.cliOptions.skipInstall) {
        if (packageJson) {
            packageJson.devDependencies = object_1.sortByKeys(Object.assign(Object.assign({}, packageJson.devDependencies), packageNamesWithVersions));
        }
        logger_1.default.debug("Skipped package installation");
        task.skip(ctx, ui.skippedInstallation);
    }
    else {
        logger_1.default.debug(`Installing packages ${text_1.stringify({ installGlobal, packageNamesWithVersions })}`);
        yield package_manager_1.installPackages(packageNamesWithVersions, { installGlobal });
        ctx.isYarn = package_1.projectHasYarn();
        if (packageJson) {
            packageJson = yield config_1.getPackageJson();
        }
    }
    if (packageJson) {
        addZeplinScripts(packageJson);
        logger_1.default.debug(`Updating package.json: ${text_1.stringify({ packageJson })}`);
        yield config_1.writePackageJson(packageJson);
        ctx.packageJson = packageJson;
    }
});
exports.installPackage = new task_1.Task({
    steps: [
        install,
        task_1.transitionTo(ui.completed)
    ],
    initial: ui.initial
});
