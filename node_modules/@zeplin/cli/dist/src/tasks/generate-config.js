"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateConfig = void 0;
const task_1 = require("../util/task");
const ui = __importStar(require("./ui/generate-config"));
const file_1 = require("../util/file");
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../util/logger"));
const text_1 = require("../util/text");
const writeFile = (filePath, config) => __awaiter(void 0, void 0, void 0, function* () {
    yield file_1.mkdir(path_1.default.dirname(filePath));
    yield file_1.writeJsonIntoFile(filePath, config);
});
const executeConfigurators = (pluginName, projectTypes, packageJson) => __awaiter(void 0, void 0, void 0, function* () {
    const pluginConfigs = yield Promise.all(projectTypes.filter(pt => pt.installPackages && pt.installPackages.includes(pluginName)).map((pt) => __awaiter(void 0, void 0, void 0, function* () {
        if (pt.configurator) {
            const pluginConfig = yield pt.configurator(packageJson);
            return pluginConfig;
        }
        return null;
    })));
    return pluginConfigs.filter(Boolean);
});
const getPluginConfigs = (installedPlugins, projectTypes, packageJson) => Promise.all(installedPlugins.map((name) => __awaiter(void 0, void 0, void 0, function* () {
    const configs = yield executeConfigurators(name, projectTypes, packageJson);
    if (configs.length > 0) {
        const pluginConfig = configs.reduce((prev, curr) => Object.assign(prev, curr), {});
        return {
            name,
            config: pluginConfig
        };
    }
    return { name };
})));
const generate = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const { installedPlugins = [], projectTypes = [], packageJson, selectedResource, selectedComponents, file, git, cliOptions: { configFile } } = ctx;
    const config = Object.create(null);
    config.plugins = yield getPluginConfigs(installedPlugins, projectTypes, packageJson);
    if (selectedResource.type === "Project") {
        config.projects = [selectedResource._id];
    }
    else {
        config.styleguides = [selectedResource._id];
    }
    config.components = [{
            path: file.path,
            zeplinIds: selectedComponents.map(c => c._id)
        }];
    if (git) {
        config[git.type] = git.config;
    }
    logger_1.default.debug(`Generated config file: ${text_1.stringify(config)}`);
    yield writeFile(configFile, config);
});
exports.generateConfig = new task_1.Task({
    steps: [
        generate,
        task_1.transitionTo(ui.completed)
    ],
    initial: ui.initial
});
