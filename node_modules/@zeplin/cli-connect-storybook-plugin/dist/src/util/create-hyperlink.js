"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStoryHyperlink = void 0;
const proper_url_join_1 = __importDefault(require("proper-url-join"));
const csf_1 = require("@storybook/csf");
function isParamsWithKindAndStory(params) {
    return "selectedKind" in params;
}
function toStoryId(params) {
    const { selectedKind, selectedStory } = params;
    if (selectedStory) {
        return csf_1.toId(selectedKind, selectedStory);
    }
    return csf_1.toId(selectedKind, "placeholder").replace("placeholder", "*");
}
function toLegacyQuery(params) {
    const { selectedKind, selectedStory } = params;
    return selectedStory ? { selectedKind, selectedStory } : { selectedKind };
}
function shouldUseTrailingSlash(url) {
    try {
        const path = new URL(url).pathname;
        // Trailing slash is required if the Storybook is hosted under a path but if
        // BaseUrl just points to the iframe.html or index.html, trailing slash should not exist
        return !(/\.\w+$/.test(path));
    }
    catch (e) {
        return false;
    }
}
function createStoryHyperlink(baseUrl, params, options = { format: "old", useDocsPage: false }) {
    let url;
    const trailingSlash = shouldUseTrailingSlash(baseUrl);
    if (isParamsWithKindAndStory(params) && options.format === "new") {
        url = proper_url_join_1.default(baseUrl, {
            trailingSlash,
            query: { path: `/story/${toStoryId(params)}` },
            queryOptions: { encode: false }
        });
    }
    else if (isParamsWithKindAndStory(params)) {
        url = proper_url_join_1.default(baseUrl, {
            trailingSlash,
            query: toLegacyQuery(params)
        });
    }
    else {
        const { storyId } = params;
        // Docs hyperlinks somehow cause error if iframe.html is accessed directly
        // To workaround this /story/ is enforced even if a docs page exist
        const viewMode = params.hasDocsPage && options.useDocsPage && !baseUrl.endsWith("iframe.html")
            ? "docs"
            : "story";
        url = proper_url_join_1.default(baseUrl, {
            trailingSlash,
            query: { path: `/${viewMode}/${storyId}` },
            queryOptions: { encode: false }
        });
    }
    return url;
}
exports.createStoryHyperlink = createStoryHyperlink;
//# sourceMappingURL=create-hyperlink.js.map