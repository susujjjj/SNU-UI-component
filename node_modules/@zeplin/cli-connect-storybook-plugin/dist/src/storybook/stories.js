"use strict";
// Original file: https://github.com/chromaui/chromatic-cli/blob/7d3a6ee/bin/tester/runtimes.js
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadStoriesFromURL = void 0;
/* eslint-disable no-useless-catch, no-console, no-underscore-dangle */
const jsdom_1 = require("jsdom");
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const extract_1 = require("./extract");
const jsdom_shims_1 = require("./jsdom-shims");
const logger_1 = require("../util/logger");
const separator = '=========================';
function loadStoriesFromURL(url, { ignoreSSLErrors = false, failFastOnErrors = false }) {
    return __awaiter(this, void 0, void 0, function* () {
        const warnings = [];
        const errors = [];
        const virtualConsole = new jsdom_1.VirtualConsole();
        virtualConsole.on('error', l => {
            errors.push(l);
        });
        virtualConsole.on('warn', l => {
            warnings.push(l);
        });
        virtualConsole.on('jsdomError', l => {
            errors.push(l);
        });
        const resourceLoader = new jsdom_1.ResourceLoader({
            userAgent: "Zeplin CLI",
            strictSSL: !ignoreSSLErrors
        });
        const dom = yield jsdom_1.JSDOM.fromURL(url, {
            userAgent: "Zeplin CLI",
            runScripts: 'dangerously',
            virtualConsole,
            resources: resourceLoader,
            pretendToBeVisual: true,
            beforeParse(window) {
                jsdom_shims_1.addShimsToJSDOM(window);
            },
        });
        yield new Promise((resolve, reject) => {
            const timeoutId = setTimeout(() => {
                reject(new Error('ContentLoadEvent timed out'));
            }, 60000);
            dom.window.addEventListener('DOMContentLoaded', () => {
                clearTimeout(timeoutId);
                resolve();
            });
        });
        // If the app logged something to console.error, it's probably, but not definitely an issue.
        // See https://github.com/hichroma/chromatic/issues/757
        if (errors.length || warnings.length) {
            const logger = logger_1.getLogger();
            logger.info('The following problems were reported from Storybook:');
            if (errors.length) {
                logger.error(errors.reduce((acc, i) => ts_dedent_1.default `
              ${acc}
              ${i}
              ${separator}
            `, ts_dedent_1.default `
              Errors:
              ${separator}
            `));
            }
            if (warnings.length) {
                logger.warn(warnings.reduce((acc, i) => ts_dedent_1.default `
              ${acc}
              ${i}
              ${separator}
            `, ts_dedent_1.default `
              Warnings:
              ${separator}
            `));
            }
            if (failFastOnErrors) {
                logger.debug("Fast fail is enabled. Abortingâ€¦");
                throw new Error("Storybook reported errors.");
            }
            else {
                logger.warn(ts_dedent_1.default `
        This may lead to some stories not working right or getting detected by Zeplin CLI
        We suggest you fix the errors, but we will continue anyway..
        ${separator}
      `);
            }
        }
        try {
            const specs = yield extract_1.extract(dom.window);
            return specs;
        }
        catch (err) {
            throw err;
        }
        finally {
            // cleanup
            dom.window.close();
        }
    });
}
exports.loadStoriesFromURL = loadStoriesFromURL;
//# sourceMappingURL=stories.js.map