import React, { useEffect, useCallback, useReducer } from "react";
import { styled } from "@storybook/theming";
import HeaderButtons from "./HeaderButtons";
import { getZeplinResource } from "../utils/api";
import { relativeDate } from "../utils/date";
import OverlayPanel from "./OverlayPanel";
const initialState = {
    selectedLink: "",
    zeplinData: null,
    zoomLevel: 1,
    loading: true,
    error: null,
};
const ZeplinPanel = ({ zeplinLink }) => {
    var _a;
    const [state, setState] = useReducer((state, newState) => ({
        ...state,
        ...newState,
    }), initialState);
    const { selectedLink, zeplinData, zoomLevel, loading, error } = state;
    const designLink = (Array.isArray(zeplinLink) ? selectedLink || ((_a = zeplinLink[0]) === null || _a === void 0 ? void 0 : _a.link) : zeplinLink);
    const fetchZeplinResource = async () => {
        if (!designLink) {
            const formattedValue = JSON.stringify(zeplinLink, null, 2);
            setState({
                loading: false,
                error: `Zeplin links are either missing or malformed. Received ${formattedValue}`,
            });
            return;
        }
        setState({ loading: true });
        const data = await getZeplinResource(designLink);
        setState({
            loading: false,
            error: data === null || data === void 0 ? void 0 : data.error,
            zeplinData: data,
        });
    };
    useEffect(() => {
        fetchZeplinResource();
    }, [zeplinLink, selectedLink]);
    const selectZeplinLink = useCallback((event) => {
        setState({ selectedLink: event.target.value });
    }, []);
    const handleZoomIn = () => {
        setState({ zoomLevel: zoomLevel * 1.25 });
    };
    const handleZoomOut = () => {
        setState({ zoomLevel: zoomLevel * 0.75 });
    };
    const handleZoomReset = () => {
        setState({ zoomLevel: 1 });
    };
    if (!zeplinLink || zeplinLink.length <= 0) {
        return (React.createElement(Message, null,
            React.createElement("strong", null, "zeplinLink"),
            " is not provided for this story."));
    }
    if (loading) {
        return React.createElement(Message, null, "Loading\u2026");
    }
    if (error) {
        return React.createElement(Message, null, error);
    }
    if (!zeplinData) {
        return (React.createElement(Message, null,
            React.createElement("strong", null, "zeplinData"),
            " is not provided for this story."));
    }
    const { name, image: { original_url, width, height }, description, updated, } = zeplinData;
    const LinksSection = Array.isArray(zeplinLink) && (React.createElement(Select, { onChange: selectZeplinLink, value: designLink }, zeplinLink.map(({ name, link }) => (React.createElement("option", { key: name, value: link }, name)))));
    return (React.createElement(Container, null,
        React.createElement(Header, null,
            LinksSection,
            React.createElement(ResourceName, { title: name }, name),
            React.createElement("i", null,
                "Updated ",
                relativeDate(updated * 1000)),
            React.createElement(HeaderButtons, { onZoomIn: handleZoomIn, onZoomOut: handleZoomOut, onZoomReset: handleZoomReset })),
        React.createElement(Divider, null),
        React.createElement(Header, null,
            React.createElement(OverlayPanel, { imageUrl: original_url })),
        React.createElement(Divider, null),
        React.createElement(ImageContainer, null,
            React.createElement("a", { href: designLink, rel: "noopener noreferrer", target: "_blank", title: name },
                React.createElement("img", { style: { transform: `scale(${zoomLevel})` }, src: original_url, alt: name, width: width, height: height }))),
        description && React.createElement(Footer, null, description)));
};
export default ZeplinPanel;
const Container = styled.div `
    display: flex;
    flex-direction: column;
    height: 100%;
`;
const Header = styled.div `
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 15px;
`;
const ResourceName = styled.strong `
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    flex: 1;
    margin-right: 15px;
`;
const ImageContainer = styled.div `
    overflow: auto;
    flex: 1;
    padding: 0 15px 15px;
    img {
        transform-origin: left top 0px;
    }
`;
const Divider = styled.hr `
    margin: 0 0 1px 0;
    &:last-of-type {
        margin-bottom: 15px;
    }
`;
const Message = styled.p `
    margin: 15px;
`;
const Select = styled.select `
    margin-right: 15px;
`;
const Footer = styled.footer `
    padding: 12px 15px;
    background-color: #f6f9fc;
`;
