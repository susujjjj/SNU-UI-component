import queryString from "query-string";
import { RESOURCE_TYPES, LINK_BASES, LINK_TYPES } from "../constants";
const webScreenRegex = /\/project\/([\da-f]{24})\/screen\/([\da-f]{24})?/i;
const webComponentRegex = /(?:\/project\/([\da-f]{24}))?\/styleguide(?:\/([\da-f]{24}))?\/components\?coid=([\da-f]{24})?/i;
function getLinkType(url) {
    if (url.startsWith(LINK_BASES.APP)) {
        return LINK_TYPES.APP;
    }
    else if (url.startsWith(LINK_BASES.WEB)) {
        return LINK_TYPES.WEB;
    }
    return null;
}
function getComponentProperties({ pid, stid, coid, }) {
    if (!coid || (pid && stid)) {
        return {
            type: RESOURCE_TYPES.INVALID,
        };
    }
    if (pid) {
        return {
            type: RESOURCE_TYPES.PROJECT_COMPONENT,
            pid,
            coid,
        };
    }
    if (stid) {
        return {
            type: RESOURCE_TYPES.STYLEGUIDE_COMPONENT,
            stid,
            coid,
        };
    }
    return {
        type: RESOURCE_TYPES.INVALID,
    };
}
function getWebLinkProperties(link) {
    const screenMatch = link.match(webScreenRegex) || [];
    let pid = screenMatch[1];
    const sid = screenMatch[2];
    if (pid && sid) {
        return {
            type: RESOURCE_TYPES.SCREEN,
            pid,
            sid,
        };
    }
    const componentMatch = link.match(webComponentRegex) || [];
    pid = componentMatch[1];
    const stid = componentMatch[2];
    const coid = componentMatch[3];
    return getComponentProperties({ pid, stid, coid });
}
function getAppUriProperties(uri) {
    var _a, _b, _c, _d, _e, _f;
    const searchParams = uri.split("?")[1];
    if (!searchParams) {
        return { type: RESOURCE_TYPES.INVALID };
    }
    const componentUri = `${LINK_BASES.APP}//components`;
    const screenUri = `${LINK_BASES.APP}//screen`;
    if (uri.startsWith(componentUri)) {
        const parsedSearchParams = queryString.parse(searchParams);
        const pid = (_a = parsedSearchParams.pid) === null || _a === void 0 ? void 0 : _a.toString();
        const stid = (_b = parsedSearchParams.stid) === null || _b === void 0 ? void 0 : _b.toString();
        const coid = ((_c = parsedSearchParams.coid) === null || _c === void 0 ? void 0 : _c.toString()) || ((_d = parsedSearchParams.coids) === null || _d === void 0 ? void 0 : _d.toString());
        return getComponentProperties({ pid, stid, coid });
    }
    else if (uri.startsWith(screenUri)) {
        const parsedSearchParams = queryString.parse(searchParams);
        const pid = (_e = parsedSearchParams.pid) === null || _e === void 0 ? void 0 : _e.toString();
        const sid = (_f = parsedSearchParams.sid) === null || _f === void 0 ? void 0 : _f.toString();
        if (pid && sid) {
            return {
                type: RESOURCE_TYPES.SCREEN,
                pid,
                sid,
            };
        }
    }
    return { type: RESOURCE_TYPES.INVALID };
}
export default function getLinkProperties(link) {
    const linkType = getLinkType(link);
    if (linkType === LINK_TYPES.WEB) {
        return getWebLinkProperties(link);
    }
    else if (linkType === LINK_TYPES.APP) {
        return getAppUriProperties(link);
    }
    return { type: RESOURCE_TYPES.INVALID };
}
